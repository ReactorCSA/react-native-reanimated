"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[816],{61516:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(67294),i=n(67177),r=n(24404),o=n(28033),l=n(76636),s=n(70399),d=n(42233);const p=()=>a.createElement(i.Z,{style:c.card},a.createElement(r.Z,{style:c.text},"Regular content \u2728")),c=o.Z.create({card:{flex:1,backgroundColor:"#b6cff7",borderRadius:16,justifyContent:"center",alignItems:"center"},text:{color:"#001a72"}}),u=()=>a.createElement(i.Z,{style:m.card},a.createElement(r.Z,{style:m.text},"Flipped content \ud83d\ude80")),m=o.Z.create({card:{flex:1,backgroundColor:"#baeee5",borderRadius:16,justifyContent:"center",alignItems:"center"},text:{color:"#001a72"}}),f={code:'function FlipCardJs1(){const{interpolate,isFlipped,withTiming,duration,isDirectionX}=this.__closure;const spinValue=interpolate(Number(isFlipped.value),[0,1],[0,180]);const rotateValue=withTiming(spinValue+"deg",{duration:duration});return{transform:[isDirectionX?{rotateX:rotateValue}:{rotateY:rotateValue}]};}'},g={code:'function FlipCardJs2(){const{interpolate,isFlipped,withTiming,duration,isDirectionX}=this.__closure;const spinValue=interpolate(Number(isFlipped.value),[0,1],[180,360]);const rotateValue=withTiming(spinValue+"deg",{duration:duration});return{transform:[isDirectionX?{rotateX:rotateValue}:{rotateY:rotateValue}]};}'},y=e=>{let{isFlipped:t,cardStyle:n,direction:r="y",duration:o=500,RegularContent:l,FlippedContent:s}=e;const p="x"===r,c=(0,d.useAnimatedStyle)(function(){const e=function(){const e=(0,d.interpolate)(Number(t.value),[0,1],[0,180]),n=(0,d.withTiming)(`${e}deg`,{duration:o});return{transform:[p?{rotateX:n}:{rotateY:n}]}};return e.__closure={interpolate:d.interpolate,isFlipped:t,withTiming:d.withTiming,duration:o,isDirectionX:p},e.__workletHash=0xcef8643056c,e.__initData=f,e}()),u=(0,d.useAnimatedStyle)(function(){const e=function(){const e=(0,d.interpolate)(Number(t.value),[0,1],[180,360]),n=(0,d.withTiming)(`${e}deg`,{duration:o});return{transform:[p?{rotateX:n}:{rotateY:n}]}};return e.__closure={interpolate:d.interpolate,isFlipped:t,withTiming:d.withTiming,duration:o,isDirectionX:p},e.__workletHash=0xa6ecbe268ea,e.__initData=g,e}());return a.createElement(i.Z,null,a.createElement(d.default.View,{style:[h.regularCard,n,c]},l),a.createElement(d.default.View,{style:[h.flippedCard,n,u]},s))},h=o.Z.create({regularCard:{position:"absolute",zIndex:1},flippedCard:{backfaceVisibility:"hidden",zIndex:2}});function C(){const e=(0,d.useSharedValue)(!1);return a.createElement(l.Z,{style:w.container},a.createElement(y,{isFlipped:e,cardStyle:w.flipCard,FlippedContent:a.createElement(u,null),RegularContent:a.createElement(p,null)}),a.createElement(i.Z,{style:w.buttonContainer},a.createElement(s.Z,{style:w.toggleButton,onPress:()=>{e.value=!e.value}},a.createElement(r.Z,{style:w.toggleButtonText},"Toggle card"))))}const w=o.Z.create({container:{flex:1,height:300,alignItems:"center",justifyContent:"center"},buttonContainer:{marginTop:16,justifyContent:"center",alignItems:"center"},toggleButton:{backgroundColor:"#b58df1",padding:12,borderRadius:48},toggleButtonText:{color:"#fff",textAlign:"center"},flipCard:{width:170,height:200}})},35523:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>C,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var a=n(87462),i=(n(67294),n(3905)),r=n(61516),o=n(29313);const l={slug:"flipCard",title:"Flip Card"},s=void 0,d={permalink:"/react-native-reanimated/examples/flipCard",source:"@site/blog/flip-card.md",title:"Flip Card",description:"Flip card allows you to display different content depending on whether the card is flipped or not. It can be especially useful when you do not want to display some data immediately after entering the screen (e.g. secure data) and only after fulfilling a certain condition or performing an action.",date:"2024-07-31T09:04:58.000Z",formattedDate:"July 31, 2024",tags:[],hasTruncateMarker:!1,authors:[],frontMatter:{slug:"flipCard",title:"Flip Card"},prevItem:{title:"Bottom Sheet",permalink:"/react-native-reanimated/examples/bottomsheet"},nextItem:{title:"Floating Action Button",permalink:"/react-native-reanimated/examples/floatingactionbutton"}},p={authorsImageUrls:[]},c=[],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},m=u("InteractiveExample"),f=u("CollapsibleCode"),g=u("ExampleVideo"),y={toc:c},h="wrapper";function C(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Flip card allows you to display different content depending on whether the card is flipped or not. It can be especially useful when you do not want to display some data immediately after entering the screen (e.g. secure data) and only after fulfilling a certain condition or performing an action."),(0,i.kt)(m,{src:o.Z,component:r.Z,mdxType:"InteractiveExample"}),(0,i.kt)("p",null,"For storing information about whether the card is flipped or not we use ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"useSharedValue")," hook. Using shared values helps to prevent unnecessary re-renders."),(0,i.kt)(f,{src:o.Z,showLines:[117,117],mdxType:"CollapsibleCode"}),(0,i.kt)("p",null,"This allows us to ",(0,i.kt)("a",{parentName:"p",href:"/docs/utilities/interpolate"},"interpolate")," values between 0-180 and 180-360 degrees, depending on whether the card is flipped or not. In addition, we use ",(0,i.kt)("a",{parentName:"p",href:"/docs/animations/withTiming"},"withTiming")," util which makes our animation smooth."),(0,i.kt)(f,{src:o.Z,showLines:[62,64],mdxType:"CollapsibleCode"}),(0,i.kt)(g,{sources:{android:"/react-native-reanimated/recordings/examples/flip_card_android.mov",ios:"/react-native-reanimated/recordings/examples/flip_card_ios.mov"},mdxType:"ExampleVideo"}),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"FlipCard")," component accepts several props: ",(0,i.kt)("inlineCode",{parentName:"p"},"duration")," allows you to change the duration of the animation, setting ",(0,i.kt)("inlineCode",{parentName:"p"},"direction")," to the value ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," allows you to change the direction of our animation, ",(0,i.kt)("strong",{parentName:"p"},"RegularContent")," and ",(0,i.kt)("strong",{parentName:"p"},"FlippedContent")," give ability to display different content for flipped and non flipped variants."),(0,i.kt)("samp",{id:"FlipCard"},"Flip Card"),(0,i.kt)(f,{src:o.Z,showLines:[51,103],mdxType:"CollapsibleCode"}))}C.isMDXComponent=!0},29313:(e,t,n)=>{n.d(t,{Z:()=>a});const a="import React from 'react';\nimport { Pressable, SafeAreaView, View, StyleSheet, Text } from 'react-native';\nimport Animated, {\n  interpolate,\n  useAnimatedStyle,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nconst RegularContent = () => {\n  return (\n    <View style={regularContentStyles.card}>\n      <Text style={regularContentStyles.text}>Regular content \u2728</Text>\n    </View>\n  );\n};\n\nconst regularContentStyles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#b6cff7',\n    borderRadius: 16,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    color: '#001a72',\n  },\n});\n\nconst FlippedContent = () => {\n  return (\n    <View style={flippedContentStyles.card}>\n      <Text style={flippedContentStyles.text}>Flipped content \ud83d\ude80</Text>\n    </View>\n  );\n};\n\nconst flippedContentStyles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#baeee5',\n    borderRadius: 16,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    color: '#001a72',\n  },\n});\n\nconst FlipCard = ({\n  isFlipped,\n  cardStyle,\n  direction = 'y',\n  duration = 500,\n  RegularContent,\n  FlippedContent,\n}) => {\n  const isDirectionX = direction === 'x';\n\n  const regularCardAnimatedStyle = useAnimatedStyle(() => {\n    const spinValue = interpolate(Number(isFlipped.value), [0, 1], [0, 180]);\n    const rotateValue = withTiming(`${spinValue}deg`, { duration });\n\n    return {\n      transform: [\n        isDirectionX ? { rotateX: rotateValue } : { rotateY: rotateValue },\n      ],\n    };\n  });\n\n  const flippedCardAnimatedStyle = useAnimatedStyle(() => {\n    const spinValue = interpolate(Number(isFlipped.value), [0, 1], [180, 360]);\n    const rotateValue = withTiming(`${spinValue}deg`, { duration });\n\n    return {\n      transform: [\n        isDirectionX ? { rotateX: rotateValue } : { rotateY: rotateValue },\n      ],\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View\n        style={[\n          flipCardStyles.regularCard,\n          cardStyle,\n          regularCardAnimatedStyle,\n        ]}>\n        {RegularContent}\n      </Animated.View>\n      <Animated.View\n        style={[\n          flipCardStyles.flippedCard,\n          cardStyle,\n          flippedCardAnimatedStyle,\n        ]}>\n        {FlippedContent}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst flipCardStyles = StyleSheet.create({\n  regularCard: {\n    position: 'absolute',\n    zIndex: 1,\n  },\n  flippedCard: {\n    backfaceVisibility: 'hidden',\n    zIndex: 2,\n  },\n});\n\nexport default function App() {\n  const isFlipped = useSharedValue(false);\n\n  const handlePress = () => {\n    isFlipped.value = !isFlipped.value;\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlipCard\n        isFlipped={isFlipped}\n        cardStyle={styles.flipCard}\n        FlippedContent={<FlippedContent />}\n        RegularContent={<RegularContent />}\n      />\n      <View style={styles.buttonContainer}>\n        <Pressable style={styles.toggleButton} onPress={handlePress}>\n          <Text style={styles.toggleButtonText}>Toggle card</Text>\n        </Pressable>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: 300,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  buttonContainer: {\n    marginTop: 16,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  toggleButton: {\n    backgroundColor: '#b58df1',\n    padding: 12,\n    borderRadius: 48,\n  },\n  toggleButtonText: {\n    color: '#fff',\n    textAlign: 'center',\n  },\n  flipCard: {\n    width: 170,\n    height: 200,\n  },\n});\n"}}]);