"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[9711],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=u(t),d=a,g=c["".concat(s,".").concat(d)]||c[d]||p[d]||o;return t?i.createElement(g,r(r({ref:n},m),{},{components:t})):i.createElement(g,r({ref:n},m))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,r[1]=l;for(var u=2;u<o;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96067:(e,n,t)=>{t.d(n,{Z:()=>o});var i=t(67294);function a(e){let{value:n}=e;return i.createElement(i.Fragment,null,n?"\u2705":"\u274c")}function o(e){let{android:n=!1,ios:t=!1,web:o=!1}=e;return i.createElement("table",{className:"platform-compatibility"},i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Android"),i.createElement("th",null,"iOS"),i.createElement("th",null,"Web"))),i.createElement("tbody",null,i.createElement("tr",null,i.createElement("td",null,i.createElement(a,{value:n})),i.createElement("td",null,i.createElement(a,{value:t})),i.createElement("td",null,i.createElement(a,{value:o})))))}},94238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var i=t(87462),a=(t(67294),t(3905)),o=t(96067);const r="import React from 'react';\nimport Animated, {\n  LayoutAnimationConfig,\n  PinwheelIn,\n  PinwheelOut,\n} from 'react-native-reanimated';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  const [outer, setOuter] = React.useState<boolean>(true);\n  const [inner, setInner] = React.useState<boolean>(true);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.buttonColumn}>\n        <Button\n          onPress={() => {\n            setOuter(!outer);\n          }}\n          title={toggleString(outer) + ' outer'}\n        />\n        <Button\n          disabled={!outer}\n          onPress={() => {\n            setInner(!inner);\n          }}\n          title={toggleString(inner) + ' inner'}\n        />\n      </View>\n      <LayoutAnimationConfig skipEntering>\n        {outer && (\n          <Animated.View\n            entering={PinwheelIn}\n            exiting={PinwheelOut}\n            style={styles.outerBox}>\n            <LayoutAnimationConfig skipEntering skipExiting>\n              {inner && (\n                <Animated.View\n                  style={styles.box}\n                  entering={PinwheelIn}\n                  exiting={PinwheelOut}\n                />\n              )}\n            </LayoutAnimationConfig>\n          </Animated.View>\n        )}\n      </LayoutAnimationConfig>\n    </View>\n  );\n}\n\nfunction toggleString(value: boolean) {\n  return value ? 'Hide' : 'Show';\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    height: 220,\n  },\n  buttonColumn: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    height: 90,\n  },\n  outerBox: {\n    width: 150,\n    height: 150,\n    backgroundColor: '#b58df1',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20,\n    margin: 20,\n  },\n  box: {\n    width: 80,\n    height: 80,\n    backgroundColor: '#782aeb',\n  },\n});\n",l={sidebar_position:5,title:"LayoutAnimationConfig",sidebar_label:"Skipping Layout Animations"},s=void 0,u={unversionedId:"layout-animations/layout-animation-config",id:"layout-animations/layout-animation-config",title:"LayoutAnimationConfig",description:"LayoutAnimationConfig is a component that lets you skip entering and exiting animations.",source:"@site/docs/layout-animations/layout-animation-config.mdx",sourceDirName:"layout-animations",slug:"/layout-animations/layout-animation-config",permalink:"/react-native-reanimated/docs/layout-animations/layout-animation-config",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/layout-animations/layout-animation-config.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"LayoutAnimationConfig",sidebar_label:"Skipping Layout Animations"},sidebar:"tutorialSidebar",previous:{title:"Custom animations",permalink:"/react-native-reanimated/docs/layout-animations/custom-animations"},next:{title:"List Layout Animations",permalink:"/react-native-reanimated/docs/layout-animations/list-layout-animations"}},m={},c=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>skipEntering</code> <Optional />",id:"skipentering-",level:4},{value:"<code>skipExiting</code> <Optional />",id:"skipexiting-",level:4},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},d=p("Optional"),g=p("Row"),y=p("ThemedVideo"),f=p("CollapsibleCode"),k={toc:c},h="wrapper";function b(e){let{components:n,...t}=e;return(0,a.kt)(h,(0,i.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LayoutAnimationConfig")," is a component that lets you skip entering and exiting animations."),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { LayoutAnimationConfig } from 'react-native-reanimated';\n\nfunction App() {\n  const [show, setShow] = React.useState(true);\n\n  return (\n    // highlight-next-line\n    <LayoutAnimationConfig skipEntering>\n      <View>\n        {show && <Animated.View entering={PinwheelIn} exiting={PinwheelOut} />}\n      </View>\n      // highlight-next-line\n    </LayoutAnimationConfig>\n  );\n}\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Type definitions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface LayoutAnimationConfigProps {\n  skipEntering?: boolean;\n  skipExiting?: boolean;\n  children: ReactNode;\n}\n"))),(0,a.kt)("h3",{id:"arguments"},"Arguments"),(0,a.kt)("h4",{id:"skipentering-"},(0,a.kt)("inlineCode",{parentName:"h4"},"skipEntering")," ",(0,a.kt)(d,{mdxType:"Optional"})),(0,a.kt)("p",null,"A boolean indicating whether children's entering animations should be skipped when ",(0,a.kt)("inlineCode",{parentName:"p"},"LayoutAnimationConfig")," is mounted."),(0,a.kt)("h4",{id:"skipexiting-"},(0,a.kt)("inlineCode",{parentName:"h4"},"skipExiting")," ",(0,a.kt)(d,{mdxType:"Optional"})),(0,a.kt)("p",null,"A boolean indicating whether children's exiting animations should be skipped when ",(0,a.kt)("inlineCode",{parentName:"p"},"LayoutAnimationConfig")," is unmounted."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(g,{mdxType:"Row"},(0,a.kt)(y,{sources:{light:"/recordings/layout-animations/layoutconfig_light.mov",dark:"/recordings/layout-animations/layoutconfig_dark.mov"},mdxType:"ThemedVideo"}),(0,a.kt)("div",{style:{flexGrow:1}},(0,a.kt)(f,{src:r,showLines:[29,46],mdxType:"CollapsibleCode"}))),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can nest the ",(0,a.kt)("inlineCode",{parentName:"p"},"LayoutAnimationConfig")," component if you want to disable animations on a smaller subset of components.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If you are working with a ",(0,a.kt)("inlineCode",{parentName:"p"},"FlatList")," and want to skip animations in items when the list is mounted and unmounted you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"skipEnteringExitingAnimations"),". This prop automatically wraps your ",(0,a.kt)("inlineCode",{parentName:"p"},"FlatList")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"<LayoutAnimationConfig skipEntering skipExiting>"),"."))),(0,a.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.kt)(o.Z,{android:!0,ios:!0,mdxType:"PlatformCompatibility"}))}b.isMDXComponent=!0}}]);