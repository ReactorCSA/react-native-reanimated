"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[5790],{56788:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>y,contentTitle:()=>h,default:()=>C,frontMatter:()=>c,metadata:()=>g,toc:()=>f});var t=a(58168),i=a(96540),o=a(15680),r=a(9176),l=a(62257),s=a(72188),d=a(45151);function u(){const e=(0,d.useSharedValue)(100);return i.createElement(r.A,{style:m.container},i.createElement(d.default.View,{style:{...m.box,width:e}}),i.createElement(l.A,{onPress:()=>{e.value=(0,d.withSpring)(e.value+50)},title:"Click me"}))}const m=s.A.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20,marginVertical:64}}),p="import React from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue<number>(100);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={{ ...styles.box, width }} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 64,\n  },\n});\n",c={sidebar_position:2},h="Your First Animation",g={unversionedId:"fundamentals/your-first-animation",id:"fundamentals/your-first-animation",title:"Your First Animation",description:"In this section, we'll guide you through the basic concepts of Reanimated. If you're new to Reanimated, you're in the right hands! We're going to start by building a simple animation which will help you develop a basic understanding of the library. Then, in the following sections, we're going to build on top of this knowledge and further expand your skills. Let's go!",source:"@site/docs/fundamentals/your-first-animation.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/your-first-animation",permalink:"/react-native-reanimated/docs/fundamentals/your-first-animation",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/fundamentals/your-first-animation.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/react-native-reanimated/docs/fundamentals/getting-started"},next:{title:"Animating styles and props",permalink:"/react-native-reanimated/docs/fundamentals/animating-styles-and-props"}},y={},f=[{value:"Using an Animated component",id:"using-an-animated-component",level:2},{value:"Defining a shared value",id:"defining-a-shared-value",level:2},{value:"Using a shared value",id:"using-a-shared-value",level:2},{value:"Using an animation function",id:"using-an-animation-function",level:2},{value:"Summary",id:"summary",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}],v=(w="InteractiveExample",function(e){return console.warn("Component "+w+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",e)});var w;const b={toc:f},N="wrapper";function C(e){let{components:n,...a}=e;return(0,o.yg)(N,(0,t.A)({},b,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"your-first-animation"},"Your First Animation"),(0,o.yg)("p",null,"In this section, we'll guide you through the basic concepts of Reanimated. If you're new to Reanimated, you're in the right hands! We're going to start by building a simple animation which will help you develop a basic understanding of the library. Then, in the following sections, we're going to build on top of this knowledge and further expand your skills. Let's go!"),(0,o.yg)("h2",{id:"using-an-animated-component"},"Using an Animated component"),(0,o.yg)("p",null,"Let's start by having something that we could see on the screen. First, to create an animatable component you need to import an ",(0,o.yg)("inlineCode",{parentName:"p"},"Animated")," object:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"import Animated from 'react-native-reanimated';\n")),(0,o.yg)("p",null,"This ",(0,o.yg)("inlineCode",{parentName:"p"},"Animated")," object wraps React Native built-ins such as ",(0,o.yg)("inlineCode",{parentName:"p"},"View"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"ScrollView")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"FlatList"),"."),(0,o.yg)("p",null,"You use these components as any other JSX components:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx",metastring:"{5}","{5}":!0},"import Animated from 'react-native-reanimated';\n\nexport default function App() {\n  return (\n    <Animated.View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n")),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"You can create your own custom Animated components with ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/createAnimatedComponent"},(0,o.yg)("inlineCode",{parentName:"a"},"createAnimatedComponent")),".")),(0,o.yg)("h2",{id:"defining-a-shared-value"},"Defining a shared value"),(0,o.yg)("p",null,"A ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," is a driving factor of all your animations. You can think of it as a React state which is automagically kept in sync between the \u201cJavaScript\u201d and the \u201cnative\u201d side of your app (hence the name). You create shared values using a ",(0,o.yg)("inlineCode",{parentName:"p"},"useSharedValue")," hook:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"import { useSharedValue } from 'react-native-reanimated';\n")),(0,o.yg)("p",null,"As with any other ",(0,o.yg)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-rules.html"},"React hook"),", you need to define it in your component's body. In a shared value, you can store any JS value like ",(0,o.yg)("inlineCode",{parentName:"p"},"number"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"string")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"boolean")," but also data structures such as ",(0,o.yg)("inlineCode",{parentName:"p"},"array")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"object"),"."),(0,o.yg)("p",null,"For now, let's use ",(0,o.yg)("inlineCode",{parentName:"p"},"100")," as the default value of the ",(0,o.yg)("inlineCode",{parentName:"p"},"useSharedValue")," hook and pass the returned value as an inline style of the ",(0,o.yg)("inlineCode",{parentName:"p"},"Animated.View"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx",metastring:"{4,9}","{4,9}":!0},"import Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  return (\n    <Animated.View\n      style={{\n        width,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n")),(0,o.yg)("h2",{id:"using-a-shared-value"},"Using a shared value"),(0,o.yg)("p",null,"Let's create a very simple animation that will animate a ",(0,o.yg)("inlineCode",{parentName:"p"},"width")," of an element. We'll make it expand by ",(0,o.yg)("inlineCode",{parentName:"p"},"50px")," on each button press. We can do this by modifying a shared value connected to the ",(0,o.yg)("inlineCode",{parentName:"p"},"width")," property of an ",(0,o.yg)("inlineCode",{parentName:"p"},"Animated.View")," component. I know it might sound complicated, but it's actually quite simple."),(0,o.yg)("p",null,"Values stored in shared values are accessed and modified by their ",(0,o.yg)("inlineCode",{parentName:"p"},".value")," property."),(0,o.yg)("p",null,"There's no setter or anything - you simply mutate the ",(0,o.yg)("inlineCode",{parentName:"p"},".value")," property like there's no tomorrow."),(0,o.yg)("p",null,"Let's define a ",(0,o.yg)("inlineCode",{parentName:"p"},"handlePress")," function inside of which we'll modify the shared value:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx",metastring:"{8,20}","{8,20}":!0},"import { Button, View } from 'react-native';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = width.value + 50;\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n")),(0,o.yg)("p",null,"Please hold on a second before you shorten ",(0,o.yg)("inlineCode",{parentName:"p"},"width.value = width.value + 50")," to ",(0,o.yg)("inlineCode",{parentName:"p"},"width.value += 50"),". We're preparing this code for the final step which will finally bring our animation to life!"),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"It's a common mistake to modify a shared value directly like this: ",(0,o.yg)("del",{parentName:"p"},(0,o.yg)("inlineCode",{parentName:"del"},"sv = sv + 100;")),". Always remember to access the shared value by using the ",(0,o.yg)("inlineCode",{parentName:"p"},".value")," property instead. Here, the correct usage would be ",(0,o.yg)("inlineCode",{parentName:"p"},"sv.value = sv.value + 100;"),".")),(0,o.yg)("h2",{id:"using-an-animation-function"},"Using an animation function"),(0,o.yg)("p",null,"Finally, import ",(0,o.yg)("inlineCode",{parentName:"p"},"withSpring")," function and wrap around ",(0,o.yg)("inlineCode",{parentName:"p"},"width.value + 50")," in the ",(0,o.yg)("inlineCode",{parentName:"p"},"handlePress")," function so that the value which ",(0,o.yg)("inlineCode",{parentName:"p"},"withSpring")," returns modifies the shared value. This will create a bouncy spring animation that transitions the width of the element from its current value (here ",(0,o.yg)("inlineCode",{parentName:"p"},"width.value"),") to the new one (here ",(0,o.yg)("inlineCode",{parentName:"p"},"width.value + 50"),")."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx",metastring:"{2,8}","{2,8}":!0},"import { Button, View } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n")),(0,o.yg)("p",null,"And voil\xe0, we've made our first animation using Reanimated! You can see how it works in its full glory in a preview below:"),(0,o.yg)(v,{src:p,component:u,mdxType:"InteractiveExample"}),(0,o.yg)("h2",{id:"summary"},"Summary"),(0,o.yg)("p",null,"In this section, we gained a firm grasp on the Reanimated fundamentals. We learned about ",(0,o.yg)("inlineCode",{parentName:"p"},"Animated")," components, shared values and how to use them to create a simple animation. To sum up:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"Animated")," components are used to define animatable elements."),(0,o.yg)("li",{parentName:"ul"},"Shared values are a driving factor of all animations and we define them using a ",(0,o.yg)("inlineCode",{parentName:"li"},"useSharedValue")," hook."),(0,o.yg)("li",{parentName:"ul"},"Shared values are always accessed and modified by their ",(0,o.yg)("inlineCode",{parentName:"li"},".value")," property (eg. ",(0,o.yg)("inlineCode",{parentName:"li"},"sv.value = 100;"),")."),(0,o.yg)("li",{parentName:"ul"},"To create smooth animations modify shared values using animation functions like ",(0,o.yg)("inlineCode",{parentName:"li"},"withTiming"))),(0,o.yg)("h2",{id:"whats-next"},"What's next?"),(0,o.yg)("p",null,"In ",(0,o.yg)("a",{parentName:"p",href:"/docs/fundamentals/animating-styles-and-props"},"the next section"),", we will learn more about how to animate styles and props using ",(0,o.yg)("inlineCode",{parentName:"p"},"useAnimatedStyle")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"useAnimatedProps")," hooks."))}C.isMDXComponent=!0},62257:(e,n,a)=>{a.d(n,{A:()=>d});var t=a(96540),i=a(72188),o=a(46413),r=a(78506),l=t.forwardRef(((e,n)=>{var a=e.accessibilityLabel,i=e.color,l=e.disabled,d=e.onPress,u=e.testID,m=e.title;return t.createElement(o.A,{accessibilityLabel:a,accessibilityRole:"button",disabled:l,focusable:!l,onPress:d,ref:n,style:[s.button,i&&{backgroundColor:i},l&&s.buttonDisabled],testID:u},t.createElement(r.A,{style:[s.text,l&&s.textDisabled]},m))}));l.displayName="Button";var s=i.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const d=l}}]);