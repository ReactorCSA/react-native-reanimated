"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[2711],{93618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>k,default:()=>R,frontMatter:()=>f,metadata:()=>g,toc:()=>N});var a=n(87462),r=n(67294),i=n(3905),l=n(67177),s=n(24404),o=n(72400),m=n(28033),d=n(42233);const u={code:"function MeasureBasicTsx1(){const{measure,animatedRef,runOnJS,setText}=this.__closure;const measurement=measure(animatedRef);if(measurement===null){return;}runOnJS(setText)(Math.floor(measurement.width));}"};function p(){const e=(0,d.useAnimatedRef)(),t=(0,d.useSharedValue)(100),[n,a]=r.useState(t.value);return r.createElement(l.Z,{style:c.container},r.createElement(d.default.View,{ref:e,style:{...c.box,width:t}}),r.createElement(s.Z,{style:c.label},"width: ",n),r.createElement(o.Z,{onPress:()=>{t.value=(0,d.withTiming)(t.value+50,{},function(){const t=function(){const t=(0,d.measure)(e);null!==t&&(0,d.runOnJS)(a)(Math.floor(t.width))};return t.__closure={measure:d.measure,animatedRef:e,runOnJS:d.runOnJS,setText:a},t.__workletHash=3777970197597,t.__initData=u,t}())},title:"Click me"}))}const c=m.Z.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20},label:{fontSize:24,marginVertical:16,color:"#b58df1"}}),h="import React from 'react';\nimport { Button, StyleSheet, View, Text } from 'react-native';\nimport Animated, {\n  MeasuredDimensions,\n  measure,\n  runOnJS,\n  useAnimatedRef,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const animatedRef = useAnimatedRef<Animated.View>();\n  const width = useSharedValue<number>(100);\n  const [text, setText] = React.useState(width.value);\n\n  const handlePress = () => {\n    width.value = withTiming(width.value + 50, {}, () => {\n      // highlight-next-line\n      const measurement: MeasuredDimensions | null = measure(animatedRef);\n\n      if (measurement === null) {\n        return;\n      }\n\n      runOnJS(setText)(Math.floor(measurement.width));\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View ref={animatedRef} style={{ ...styles.box, width }} />\n      <Text style={styles.label}>width: {text}</Text>\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n  },\n  label: {\n    fontSize: 24,\n    marginVertical: 16,\n    color: '#b58df1',\n  },\n});\n",f={sidebar_position:1},k="measure",g={unversionedId:"advanced/measure",id:"advanced/measure",title:"measure",description:"measure lets you synchronously get the dimensions and position of a view on the screen, all on the UI thread.",source:"@site/docs/advanced/measure.mdx",sourceDirName:"advanced",slug:"/advanced/measure",permalink:"/react-native-reanimated/docs/advanced/measure",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/advanced/measure.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Advanced APIs",permalink:"/react-native-reanimated/docs/category/advanced-apis"},next:{title:"useAnimatedReaction",permalink:"/react-native-reanimated/docs/advanced/useAnimatedReaction"}},b={},N=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],v=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},y=v("InteractiveExample"),w=v("Indent"),x={toc:N},C="wrapper";function R(e){let{components:t,...n}=e;return(0,i.kt)(C,(0,a.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"measure"},"measure"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"measure")," lets you synchronously get the dimensions and position of a view on the screen, all on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),"."),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { measure } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const handlePress = () => {\n    runOnUI(() => {\n      // highlight-next-line\n      const measurement = measure(animatedRef);\n      if (measurement === null) {\n        return;\n      }\n      // ...\n    })();\n  };\n\n  return <Animated.View ref={animatedRef} />;\n}\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Type definitions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface MeasuredDimensions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n}\n\nfunction measure<T extends Component>(\n  animatedRef: AnimatedRef<T>\n): MeasuredDimensions | null;\n"))),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("h4",{id:"animatedref"},(0,i.kt)("inlineCode",{parentName:"h4"},"animatedRef")),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/useAnimatedRef#returns"},"animated ref")," connected to the component you'd want to get the measurements from. The animated ref has to be passed either to an ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animated-component"},"Animated component")," or a React Native built-in component."),(0,i.kt)("h3",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"measure")," returns an object containing these fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x")," a number representing X coordinate relative to the parent component,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"y")," a number representing Y coordinate relative to the parent component,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"width")," a number representing the width of the component,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"height")," a number representing the height of the component,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pageX")," a number representing X coordinate relative to the screen,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pageY")," a number representing Y coordinate relative to the screen,")),(0,i.kt)("p",null,"or returns ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," when the measurement couldn't be performed."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)(y,{src:h,component:p,mdxType:"InteractiveExample"}),(0,i.kt)("h2",{id:"remarks"},"Remarks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"measure")," is implemented only on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),". When using ",(0,i.kt)("inlineCode",{parentName:"p"},"measure")," inside ",(0,i.kt)("a",{parentName:"p",href:"https://react.dev/learn/responding-to-events#adding-event-handlers"},"event handlers"),", it has to be wrapped with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/threading/runOnUI"},(0,i.kt)("inlineCode",{parentName:"a"},"runOnUI"))," function.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," function is first evaluated on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#javascript-thread"},"JavaScript thread")," just before the views are attached to the native side. For this reason, to safely use the measure within ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle"),", a condition similar to the one below must be added to the code:"))),(0,i.kt)(w,{mdxType:"Indent"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    if (_WORKLET) {\n      // safely use measure\n      const measurement = measure(animatedRef);\n    }\n  });\n}\n")),(0,i.kt)("p",null,"Consecutive runs of ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," are executed on the UI thread.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When you only need the dimensions of the component and won't use the measurements during animation, consider using the ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/view#onlayout"},(0,i.kt)("inlineCode",{parentName:"a"},"onLayout"))," property instead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sometimes, ",(0,i.kt)("inlineCode",{parentName:"p"},"measure")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," (e.g., when the ",(0,i.kt)("inlineCode",{parentName:"p"},"ref")," hasn't yet attached to the view). It's best to add a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," check after the measurement for added safety."))),(0,i.kt)(w,{mdxType:"Indent"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const animatedRef = useAnimatedRef();\n\nconst handlePress = () => {\n  runOnUI(() => {\n    const measurement = measure(animatedRef);\n\n    // highlight-start\n    if (measurement === null) {\n      return;\n    }\n    // highlight-end\n    // ...\n  })();\n};\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"measure")," can be used only on rendered components. For instance, attempting to ",(0,i.kt)("inlineCode",{parentName:"p"},"measure")," off-screen items in a ",(0,i.kt)("inlineCode",{parentName:"p"},"FlatList")," will return a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," value.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"measure")," isn't available with the Remote JS Debugger. We highly recommend using Chrome DevTools (also known as ",(0,i.kt)("inlineCode",{parentName:"p"},"chrome://inspect"),") for debugging React Native apps."))),(0,i.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,i.kt)("div",{className:"platform-compatibility"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Android"),(0,i.kt)("th",{parentName:"tr",align:null},"iOS"),(0,i.kt)("th",{parentName:"tr",align:null},"Web"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"))))))}R.isMDXComponent=!0},72400:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(67294),r=n(28033),i=n(88548),l=n(24404),s=a.forwardRef(((e,t)=>{var n=e.accessibilityLabel,r=e.color,s=e.disabled,m=e.onPress,d=e.testID,u=e.title;return a.createElement(i.Z,{accessibilityLabel:n,accessibilityRole:"button",disabled:s,focusable:!s,onPress:m,ref:t,style:[o.button,r&&{backgroundColor:r},s&&o.buttonDisabled],testID:d},a.createElement(l.Z,{style:[o.text,s&&o.textDisabled]},u))}));s.displayName="Button";var o=r.Z.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const m=s}}]);