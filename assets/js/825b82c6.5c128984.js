"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[1798],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>y});var i=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},r=Object.keys(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=i.createContext({}),m=function(t){var e=i.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=m(t.components);return i.createElement(s.Provider,{value:e},t.children)},d="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},c=i.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=m(n),c=a,y=d["".concat(s,".").concat(c)]||d[c]||p[c]||r;return n?i.createElement(y,o(o({ref:e},u),{},{components:n})):i.createElement(y,o({ref:e},u))}));function y(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[d]="string"==typeof t?t:a,o[1]=l;for(var m=2;m<r;m++)o[m]=n[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},38485:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var i=n(87462),a=(n(67294),n(3905));const r={sidebar_position:6,title:"List Layout Animations",sidebar_label:"List Layout Animations"},o=void 0,l={unversionedId:"layout-animations/list-layout-animations",id:"layout-animations/list-layout-animations",title:"List Layout Animations",description:"itemLayoutAnimation lets you define a layout transition that's applied when list items layout changes. You can use one of the predefined transitions like LinearTransition or create your own transition.",source:"@site/docs/layout-animations/list-layout-animations.mdx",sourceDirName:"layout-animations",slug:"/layout-animations/list-layout-animations",permalink:"/react-native-reanimated/docs/layout-animations/list-layout-animations",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/layout-animations/list-layout-animations.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"List Layout Animations",sidebar_label:"List Layout Animations"},sidebar:"tutorialSidebar",previous:{title:"Skipping Layout Animations",permalink:"/react-native-reanimated/docs/layout-animations/layout-animation-config"},next:{title:"Shared Element Transitions",permalink:"/react-native-reanimated/docs/category/shared-element-transitions"}},s={},m=[{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],u=t=>function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)},d=u("Row"),p=u("ThemedVideo"),c=u("Indent"),y=u("PlatformCompatibility"),f={toc:m},h="wrapper";function k(t){let{components:e,...n}=t;return(0,a.kt)(h,(0,i.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"itemLayoutAnimation")," lets you define a ",(0,a.kt)("a",{parentName:"p",href:"/docs/layout-animations/layout-transitions"},"layout transition")," that's applied when list items layout changes. You can use one of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/layout-animations/layout-transitions#predefined-transitions"},"predefined transitions")," like ",(0,a.kt)("inlineCode",{parentName:"p"},"LinearTransition")," or create ",(0,a.kt)("a",{parentName:"p",href:"/docs/layout-animations/custom-animations#custom-layout-transition"},"your own transition"),"."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(d,{mdxType:"Row"},(0,a.kt)(p,{sources:{light:"/recordings/layout-animations/listitem_light.mov",dark:"/recordings/layout-animations/listitem_dark.mov"},mdxType:"ThemedVideo"}),(0,a.kt)("div",{style:{flexGrow:1}},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import Animated, { LinearTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      // highlight-next-line\n      itemLayoutAnimation={LinearTransition}\n    />\n  );\n}\n")))),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"itemLayoutAnimation")," works only with a single-column ",(0,a.kt)("inlineCode",{parentName:"li"},"Animated.FlatList"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"numColumns")," property cannot be grater than 1."),(0,a.kt)("li",{parentName:"ul"},"You can change the ",(0,a.kt)("inlineCode",{parentName:"li"},"itemLayoutAnimation")," on the fly or disable it by setting it to ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,a.kt)(c,{mdxType:"Indent"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const [transition, setTransition] = useState(LinearTransition);\n\n  const changeTransition = () => {\n    // highlight-start\n    setTransition(\n      transition === LinearTransition ? JumpingTransition : LinearTransition\n    );\n    // highlight-end\n  };\n\n  const toggleTransition = () => {\n    // highlight-next-line\n    setTransition(transition ? undefined : LinearTransition);\n  };\n\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      // highlight-next-line\n      itemLayoutAnimation={transition}\n    />\n  );\n}\n"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the list items contain neither a ",(0,a.kt)("inlineCode",{parentName:"li"},"key")," nor ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," property (which are used by default by the FlatList ",(0,a.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/flatlist#keyextractor"},"keyExtractor")," to create list item keys), you must provide your own implementation of the ",(0,a.kt)("inlineCode",{parentName:"li"},"keyExtractor")," function that returns a unique key for each list item.")),(0,a.kt)(c,{mdxType:"Indent"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      itemLayoutAnimation={LinearTransition}\n      // highlight-next-line\n      keyExtractor={customKeyExtractor}\n    />\n  );\n}\n"))),(0,a.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.kt)(y,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}k.isMDXComponent=!0}}]);