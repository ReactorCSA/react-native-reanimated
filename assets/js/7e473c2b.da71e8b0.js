"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[2265],{56620:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>N,contentTitle:()=>k,default:()=>x,frontMatter:()=>h,metadata:()=>v,toc:()=>b});var n=a(87462),r=a(67294),i=a(3905),o=a(67177),s=a(72400),d=a(28033),l=a(42233);const p=["#FFE780","#87CCE8","#FFA3A1","#B1DFD0","#B58DF1"],m={code:"function SetNativePropsTsx1(){const{setNativeProps,animatedRef,COLORS}=this.__closure;setNativeProps(animatedRef,{backgroundColor:COLORS[Math.floor(Math.random()*COLORS.length)]});}"};function c(){const e=(0,l.useAnimatedRef)();return r.createElement(o.Z,{style:u.container},r.createElement(l.default.View,{ref:e,style:u.box}),r.createElement(s.Z,{title:"change color",onPress:()=>{(0,l.runOnUI)(function(){const t=function(){(0,l.setNativeProps)(e,{backgroundColor:p[Math.floor(Math.random()*p.length)]})};return t.__closure={setNativeProps:l.setNativeProps,animatedRef:e,COLORS:p},t.__workletHash=0xddc960cb157,t.__initData=m,t}())()}}))}const u=d.Z.create({container:{flex:1,alignItems:"center",justifyContent:"center"},box:{height:120,width:120,backgroundColor:"#B58DF1",borderRadius:20,marginBottom:30}}),f="import React from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport Animated, {\n  runOnUI,\n  setNativeProps,\n  useAnimatedRef,\n} from 'react-native-reanimated';\n\nconst COLORS = ['#FFE780', '#87CCE8', '#FFA3A1', '#B1DFD0', '#B58DF1'];\n\nexport default function Example() {\n  const animatedRef = useAnimatedRef<Animated.View>();\n\n  const handlePress = () => {\n    runOnUI(() => {\n      // highlight-next-line\n      setNativeProps(animatedRef, {\n        backgroundColor: COLORS[Math.floor(Math.random() * COLORS.length)],\n        // highlight-next-line\n      });\n    })();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View ref={animatedRef} style={styles.box} />\n      <Button title=\"change color\" onPress={handlePress} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#B58DF1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n",h={sidebar_position:8},k="setNativeProps",v={unversionedId:"advanced/setNativeProps",id:"advanced/setNativeProps",title:"setNativeProps",description:"setNativeProps lets you imperatively update component properties.",source:"@site/docs/advanced/setNativeProps.mdx",sourceDirName:"advanced",slug:"/advanced/setNativeProps",permalink:"/react-native-reanimated/docs/advanced/setNativeProps",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/advanced/setNativeProps.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"dispatchCommand",permalink:"/react-native-reanimated/docs/advanced/dispatchCommand"},next:{title:"makeMutable",permalink:"/react-native-reanimated/docs/advanced/makeMutable"}},N={},b=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"<code>updates</code>",id:"updates",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],g=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},y=g("InteractiveExample"),C=g("PlatformCompatibility"),P={toc:b},R="wrapper";function x(e){let{components:t,...a}=e;return(0,i.kt)(R,(0,n.Z)({},P,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"setnativeprops"},"setNativeProps"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"setNativeProps")," lets you imperatively update component properties."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"setNativeProps")," is an escape hatch for specific edge-cases."),(0,i.kt)("p",{parentName:"admonition"},"You should always reach for ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/useAnimatedStyle"},(0,i.kt)("inlineCode",{parentName:"a"},"useAnimatedStyle"))," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/useAnimatedProps"},(0,i.kt)("inlineCode",{parentName:"a"},"useAnimatedProps"))," first when animating styles or properties.")),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { setNativeProps } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const tap = Gesture.Tap().onEnd(() => {\n    // highlight-start\n    setNativeProps(animatedRef, { text: '' });\n    // highlight-end\n  });\n\n  return <TextInput ref={animatedRef} />;\n}\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Type definitions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function setNativeProps<T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  updates: StyleProps\n) => void;\n"))),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("h4",{id:"animatedref"},(0,i.kt)("inlineCode",{parentName:"h4"},"animatedRef")),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/useAnimatedRef#returns"},"animated ref")," connected to the component you'd want to update. The animated ref has to be passed either to an ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animated-component"},"Animated component")," or a React Native built-in component."),(0,i.kt)("h4",{id:"updates"},(0,i.kt)("inlineCode",{parentName:"h4"},"updates")),(0,i.kt)("p",null,"An object with properties you want to update. These could be both style props (eg. ",(0,i.kt)("inlineCode",{parentName:"p"},"width"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"backgroundColor"),") and regular props (eg. ",(0,i.kt)("inlineCode",{parentName:"p"},"text"),")."),(0,i.kt)("h3",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"setNativeProps")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)(y,{src:f,component:c,mdxType:"InteractiveExample"}),(0,i.kt)("h2",{id:"remarks"},"Remarks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You should always reach for ",(0,i.kt)("a",{parentName:"p",href:"docs/core/useAnimatedStyle"},(0,i.kt)("inlineCode",{parentName:"a"},"useAnimatedStyle"))," and ",(0,i.kt)("a",{parentName:"p",href:"docs/core/useAnimatedProps"},(0,i.kt)("inlineCode",{parentName:"a"},"useAnimatedProps"))," first when animating styles or properties.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"setNativeProps")," is supposed to only be used on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"setNativeProps")," function was created to allow updating props imperatively from gesture handlers. Because in other cases, you need to wrap ",(0,i.kt)("inlineCode",{parentName:"p"},"setNativeProps")," with an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"runOnUI")," call, React Native's ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/animations#setnativeprops"},"built-in ",(0,i.kt)("inlineCode",{parentName:"a"},"setNativeProps"))," proves to work better with fewer jumps between runtimes."))),(0,i.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,i.kt)(C,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}x.isMDXComponent=!0},72400:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),r=a(28033),i=a(88548),o=a(24404),s=n.forwardRef(((e,t)=>{var a=e.accessibilityLabel,r=e.color,s=e.disabled,l=e.onPress,p=e.testID,m=e.title;return n.createElement(i.Z,{accessibilityLabel:a,accessibilityRole:"button",disabled:s,focusable:!s,onPress:l,ref:t,style:[d.button,r&&{backgroundColor:r},s&&d.buttonDisabled],testID:p},n.createElement(o.Z,{style:[d.text,s&&d.textDisabled]},m))}));s.displayName="Button";var d=r.Z.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const l=s}}]);