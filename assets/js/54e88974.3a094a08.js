"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=s(n),c=r,y=p["".concat(d,".").concat(c)]||p[c]||u[c]||i;return n?a.createElement(y,o(o({ref:t},m),{},{components:n})):a.createElement(y,o({ref:t},m))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},96067:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294);function r(e){let{value:t}=e;return a.createElement(a.Fragment,null,t?"\u2705":"\u274c")}function i(e){let{android:t=!1,ios:n=!1,web:i=!1}=e;return a.createElement("table",{className:"platform-compatibility"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Android"),a.createElement("th",null,"iOS"),a.createElement("th",null,"Web"))),a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",null,a.createElement(r,{value:t})),a.createElement("td",null,a.createElement(r,{value:n})),a.createElement("td",null,a.createElement(r,{value:i})))))}},83360:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),i=n(96067);n(44996);const o="import React from 'react';\nimport Animated, {\n  useAnimatedKeyboard,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\nimport { StyleSheet, TextInput, View, useColorScheme } from 'react-native';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  const keyboard = useAnimatedKeyboard();\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateY: -keyboard.height.value }],\n  }));\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        animatedStyles,\n        { backgroundColor: colorScheme === 'light' ? '#fff' : '#000' },\n      ]}>\n      <View style={styles.box}>\n        <TextInput placeholder=\"Text Input\" />\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    borderWidth: 5,\n    borderColor: '#782aeb',\n    borderRadius: 2,\n  },\n  box: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 200,\n    backgroundColor: '#b58df1',\n    borderRadius: 5,\n    margin: 20,\n  },\n});\n",l={sidebar_position:1},d=void 0,s={unversionedId:"device/useAnimatedKeyboard",id:"device/useAnimatedKeyboard",title:"useAnimatedKeyboard",description:"useAnimatedKeyboard lets you create animations based on state and height of the virtual keyboard.",source:"@site/docs/device/useAnimatedKeyboard.mdx",sourceDirName:"device",slug:"/device/useAnimatedKeyboard",permalink:"/react-native-reanimated/docs/device/useAnimatedKeyboard",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/device/useAnimatedKeyboard.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Device",permalink:"/react-native-reanimated/docs/category/device"},next:{title:"useAnimatedSensor",permalink:"/react-native-reanimated/docs/device/useAnimatedSensor"}},m={},p=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>options</code> <Optional />",id:"options-",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=u("Optional"),y=u("InteractiveExample"),k=u("ThemedVideo"),b={toc:p},h="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," lets you create animations based on state and height of the virtual keyboard."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Android implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," has drawbacks on Android SDK < 30, for more details see ",(0,r.kt)("a",{parentName:"p",href:"/docs/device/useAnimatedKeyboard#remarks"},"remarks")," section.")),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { useAnimatedKeyboard, useAnimatedStyle } from 'react-native-reanimated';\n\nexport default function App() {\n  const keyboard = useAnimatedKeyboard();\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateY: -keyboard.height.value }],\n  }));\n}\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Type definitions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// --- Function declaration ---\n\nfunction useAnimatedKeyboard(\n  options: AnimatedKeyboardOptions\n): AnimatedKeyboardInfo;\n\n// --- Configuration types ---\n\nexport interface AnimatedKeyboardOptions {\n  isStatusBarTranslucentAndroid?: boolean;\n}\n\n// --- Return types ---\n\nexport type AnimatedKeyboardInfo = {\n  height: SharedValue<number>;\n  state: SharedValue<KeyboardState>;\n};\n\nexport enum KeyboardState {\n  UNKNOWN = 0,\n  OPENING = 1,\n  OPEN = 2,\n  CLOSING = 3,\n  CLOSED = 4,\n}\n"))),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("h4",{id:"options-"},(0,r.kt)("inlineCode",{parentName:"h4"},"options")," ",(0,r.kt)(c,{mdxType:"Optional"})),(0,r.kt)("p",null,"Optional object containing additional configuration:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isStatusBarTranslucentAndroid")," - removes top inset on Android i.e. to use translucent status bar on Android, set this option to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),". Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),". Ignored on iOS.")),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,"Hook ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," returns an object containing these fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"height"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SharedValue<number>")),(0,r.kt)("td",{parentName:"tr",align:null},"A ",(0,r.kt)("a",{parentName:"td",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," containing current height of the keyboard.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SharedValue<KeyboardState>")),(0,r.kt)("td",{parentName:"tr",align:null},"A ",(0,r.kt)("a",{parentName:"td",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," containing current state of the keyboard. Possible states: ",(0,r.kt)("inlineCode",{parentName:"td"},"{ CLOSED, OPEN, CLOSING, OPENING }"))))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(y,{src:o,component:()=>(0,r.kt)(k,{center:!0,width:300,sources:{light:"/recordings/useAnimatedKeyboard_light.mov",dark:"/recordings/useAnimatedKeyboard_dark.mov"},mdxType:"ThemedVideo"}),mdxType:"InteractiveExample"}),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"On Android, make sure to set ",(0,r.kt)("inlineCode",{parentName:"p"},"android:windowSoftInputMode")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"adjustResize"),". Then, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook disables\nthe default Android behavior (resizing the view to accommodate keyboard) in the whole app. Using values from ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook you can handle the keyboard yourself. Unmounting all components that use ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook brings back the default Android behavior.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"On Android, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook expands root view to full screen (",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/develop/ui/views/layout/immersive"},"immersive mode"),") and takes control over insets management."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"isStatusBarTranslucentAndroid")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," it applies the top and bottom margins according to the insets.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"isStatusBarTranslucentAndroid")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," it applies bottom padding according to the navigation inset and sets top margin to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),".")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"On Android, when using navigation with native header, ",(0,r.kt)("inlineCode",{parentName:"p"},"isStatusBarTranslucentAndroid")," doesn't affect the top inset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"On Android SDK < 30, when status bar is hidden, the keyboard reverts to the default Android behavior."))),(0,r.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,r.kt)(i.Z,{android:!0,ios:!0,mdxType:"PlatformCompatibility"}))}f.isMDXComponent=!0}}]);