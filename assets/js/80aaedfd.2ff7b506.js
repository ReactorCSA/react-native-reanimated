"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3474],{6759:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>w,default:()=>N,frontMatter:()=>k,metadata:()=>S,toc:()=>y});var a=n(87462),l=n(67294),o=n(3905),r=n(67177),i=n(24404),s=n(72400),c=n(28033),d=n(92747),u=n(42233);const m={code:'function ScrollViewOffsetTsx1(){const{offset}=this.__closure;return"Scroll offset: "+offset.value.toFixed(1);}'};function f(){const e=(0,u.useAnimatedRef)(),t=(0,u.useScrollViewOffset)(e),n=(0,u.useDerivedValue)(function(){const e=()=>`Scroll offset: ${t.value.toFixed(1)}`;return e.__closure={offset:t},e.__workletHash=0xb7cc16efb6b,e.__initData=m,e}()),[a,o]=l.useState(!1);return l.createElement(r.Z,{style:p.container},l.createElement(v,{text:n}),l.createElement(u.default.ScrollView,{style:p.scroll,contentContainerStyle:p.scrollContent,ref:e,horizontal:a},Array.from({length:10}).map(((e,t)=>l.createElement(r.Z,{key:t,style:p.box},l.createElement(i.Z,{style:p.center},t))))),l.createElement(s.Z,{title:"Toggle scroll to "+(a?"vertical":"horizontal"),onPress:()=>o(!a)}))}const p=c.Z.create({container:{alignItems:"center"},scroll:{borderWidth:1,borderColor:"gray",height:250,width:250,margin:20},scrollContent:{alignItems:"center"},box:{width:100,height:100,margin:10,borderRadius:15,backgroundColor:"#b58df1",alignItems:"center",justifyContent:"center"},center:{textAlign:"center"}}),h=u.default.createAnimatedComponent(d.Z);u.default.addWhitelistedNativeProps({text:!0});const b={code:"function ScrollViewOffsetTsx2(){const{text}=this.__closure;return{text:text.value,defaultValue:text.value};}"};function v(e){let{text:t,...n}=e;const o=(0,u.useAnimatedProps)(function(){const e=()=>({text:t.value,defaultValue:t.value});return e.__closure={text:t},e.__workletHash=0x9bcbbb71bc5,e.__initData=b,e}());return l.createElement(h,(0,a.Z)({editable:!1},n,{value:t.value,animatedProps:o}))}const x="import React from 'react';\nimport { View, Text, StyleSheet, TextInput, Button } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedRef,\n  useDerivedValue,\n  useScrollViewOffset,\n} from 'react-native-reanimated';\nimport type { DerivedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const animatedRef = useAnimatedRef<Animated.ScrollView>();\n  // highlight-start\n  const offset = useScrollViewOffset(animatedRef);\n  const text = useDerivedValue(\n    () => `Scroll offset: ${offset.value.toFixed(1)}`\n  );\n  // highlight-end\n  const [isScrollHorizontal, setIsScrollHorizontal] =\n    React.useState<boolean>(false);\n\n  return (\n    <View style={styles.container}>\n      <AnimatedText text={text} />\n      <Animated.ScrollView\n        style={styles.scroll}\n        contentContainerStyle={styles.scrollContent}\n        ref={animatedRef}\n        horizontal={isScrollHorizontal}>\n        {Array.from({ length: 10 }).map((_, i) => (\n          <View key={i} style={styles.box}>\n            <Text style={styles.center}>{i}</Text>\n          </View>\n        ))}\n      </Animated.ScrollView>\n      <Button\n        title={`Toggle scroll to ${\n          isScrollHorizontal ? 'vertical' : 'horizontal'\n        }`}\n        onPress={() => setIsScrollHorizontal(!isScrollHorizontal)}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n  },\n  scroll: {\n    borderWidth: 1,\n    borderColor: 'gray',\n    height: 250,\n    width: 250,\n    margin: 20,\n  },\n  scrollContent: {\n    alignItems: 'center',\n  },\n  box: {\n    width: 100,\n    height: 100,\n    margin: 10,\n    borderRadius: 15,\n    backgroundColor: '#b58df1',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  center: {\n    textAlign: 'center',\n  },\n});\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\nAnimated.addWhitelistedNativeProps({ text: true });\n\nfunction AnimatedText({ text, ...props }: { text: DerivedValue<string> }) {\n  const animatedProps = useAnimatedProps(() => ({\n    text: text.value,\n    defaultValue: text.value,\n  }));\n  return (\n    <AnimatedTextInput\n      editable={false}\n      {...props}\n      value={text.value}\n      animatedProps={animatedProps}\n    />\n  );\n}\n",k={sidebar_position:2},w="useScrollViewOffset",S={unversionedId:"scroll/useScrollViewOffset",id:"scroll/useScrollViewOffset",title:"useScrollViewOffset",description:"useScrollViewOffset lets you to create animations based on the offset of a ScrollView.",source:"@site/docs/scroll/useScrollViewOffset.mdx",sourceDirName:"scroll",slug:"/scroll/useScrollViewOffset",permalink:"/react-native-reanimated/docs/scroll/useScrollViewOffset",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/scroll/useScrollViewOffset.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"scrollTo",permalink:"/react-native-reanimated/docs/scroll/scrollTo"},next:{title:"useAnimatedScrollHandler",permalink:"/react-native-reanimated/docs/scroll/useAnimatedScrollHandler"}},g={},y=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"<code>initialRef</code> <Optional/>",id:"initialref-",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],V=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},A=V("Optional"),R=V("InteractiveExample"),C=V("PlatformCompatibility"),O={toc:y},T="wrapper";function N(e){let{components:t,...n}=e;return(0,o.kt)(T,(0,a.Z)({},O,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usescrollviewoffset"},"useScrollViewOffset"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useScrollViewOffset")," lets you to create animations based on the offset of a ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView"),".\nThe hook automatically detects if the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," is horizontal or vertical."),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useScrollViewOffset } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n  // highlight-next-line\n  const scrollOffset = useScrollViewOffset(animatedRef);\n  return (\n    <Animated.ScrollView ref={animatedRef}>{/* ... */}</Animated.ScrollView>\n  );\n}\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Type definitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"function useScrollViewOffset(\n  animatedRef: AnimatedRef<AnimatedScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number>;\n"))),(0,o.kt)("h3",{id:"arguments"},"Arguments"),(0,o.kt)("h4",{id:"animatedref"},(0,o.kt)("inlineCode",{parentName:"h4"},"animatedRef")),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/useAnimatedRef#returns"},"animated ref")," connected to the ScrollView component you'd want to scroll on. The animated ref has to be passed either to an ",(0,o.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animated-component"},"Animated component")," or a React Native built-in component."),(0,o.kt)("h4",{id:"initialref-"},(0,o.kt)("inlineCode",{parentName:"h4"},"initialRef")," ",(0,o.kt)(A,{mdxType:"Optional"})),(0,o.kt)("p",null,"An optional shared value to be updated with the scroll offset. If not provided a new shared value will be created internally."),(0,o.kt)("h3",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useScrollViewOffset")," returns a ",(0,o.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," which holds the current offset of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView"),"."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)(R,{src:x,component:f,showCode:!0,mdxType:"InteractiveExample"}),(0,o.kt)("h2",{id:"remarks"},"Remarks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"animatedRef")," argument can be changed at will and the hook will correctly return values based on the ScrollView component it is connected to, for example:"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"useScrollViewOffset(someState ? someScrollRefA : someScrollRefB)")))),(0,o.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,o.kt)(C,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}N.isMDXComponent=!0},72400:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),l=n(28033),o=n(88548),r=n(24404),i=a.forwardRef(((e,t)=>{var n=e.accessibilityLabel,l=e.color,i=e.disabled,c=e.onPress,d=e.testID,u=e.title;return a.createElement(o.Z,{accessibilityLabel:n,accessibilityRole:"button",disabled:i,focusable:!i,onPress:c,ref:t,style:[s.button,l&&{backgroundColor:l},i&&s.buttonDisabled],testID:d},a.createElement(r.Z,{style:[s.text,i&&s.textDisabled]},u))}));i.displayName="Button";var s=l.Z.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const c=i}}]);