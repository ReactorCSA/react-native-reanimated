"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3514],{15680:(e,t,r)=>{r.d(t,{xA:()=>f,yg:()=>m});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},f=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,m=p["".concat(s,".").concat(d)]||p[d]||u[d]||l;return r?n.createElement(m,o(o({ref:t},f),{},{components:r})):n.createElement(m,o({ref:t},f))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},39770:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=r(58168),a=(r(96540),r(15680));const l={id:"useScrollViewOffset",title:"useScrollViewOffset",sidebar_label:"useScrollViewOffset"},o=void 0,i={unversionedId:"api/hooks/useScrollViewOffset",id:"version-2.x/api/hooks/useScrollViewOffset",title:"useScrollViewOffset",description:"useScrollViewOffset is available since v2.11.0",source:"@site/versioned_docs/version-2.x/api/hooks/useScrollViewOffset.md",sourceDirName:"api/hooks",slug:"/api/hooks/useScrollViewOffset",permalink:"/react-native-reanimated/docs/2.x/api/hooks/useScrollViewOffset",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-2.x/api/hooks/useScrollViewOffset.md",tags:[],version:"2.x",frontMatter:{id:"useScrollViewOffset",title:"useScrollViewOffset",sidebar_label:"useScrollViewOffset"},sidebar:"docs",previous:{title:"useHandler",permalink:"/react-native-reanimated/docs/2.x/api/hooks/useHandler"},next:{title:"useSharedValue",permalink:"/react-native-reanimated/docs/2.x/api/hooks/useSharedValue"}},s={},c=[{value:"Arguments",id:"arguments",level:3},{value:"<code>aref</code> RefObject<Animated.ScrollView>",id:"aref-refobjectanimatedscrollview",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}],f={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.yg)(p,(0,n.A)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"useScrollViewOffset is available since v2.11.0")),(0,a.yg)("p",null,"This hook allows you to create animations based on the offset of a ",(0,a.yg)("inlineCode",{parentName:"p"},"ScrollView"),".\nThe hook automatically detects if the ",(0,a.yg)("inlineCode",{parentName:"p"},"ScrollView")," is horizontal or vertical."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"useScrollViewOffset(aref: RefObject<Animated.ScrollView>) => [SharedValue<number>]\n")),(0,a.yg)("h3",{id:"arguments"},"Arguments"),(0,a.yg)("h4",{id:"aref-refobjectanimatedscrollview"},(0,a.yg)("inlineCode",{parentName:"h4"},"aref")," ","[RefObject","<","Animated.ScrollView",">]"),(0,a.yg)("p",null,"An Animated reference to a ",(0,a.yg)("inlineCode",{parentName:"p"},"ScrollView"),". The reference should be passed to the\nappropriate ",(0,a.yg)("inlineCode",{parentName:"p"},"ScrollView")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop."),(0,a.yg)("h3",{id:"returns"},"Returns"),(0,a.yg)("p",null,"A shared value which holds the current offset of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ScrollView"),"."),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"function ScrollViewOffsetExample() {\n  const aref = useAnimatedRef<Animated.ScrollView>();\n  const scrollHandler = useScrollViewOffset(aref);\n\n  useAnimatedStyle(() => {\n    console.log(scrollHandler.value);\n    return {};\n  });\n\n  return (\n    <>\n      <View style={styles.positionView}>\n        <Text>Test</Text>\n      </View>\n      <View style={styles.divider} />\n      <Animated.ScrollView\n        ref={aref}\n        scrollEventThrottle={16}\n        style={styles.scrollView}>\n        {[...Array(100)].map((_, i) => (\n          <Text key={i} style={styles.text}>\n            {i}\n          </Text>\n        ))}\n      </Animated.ScrollView>\n    </>\n  );\n}\n")))}u.isMDXComponent=!0}}]);