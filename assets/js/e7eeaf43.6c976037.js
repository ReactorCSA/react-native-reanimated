"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[9711],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>g});var i=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},o=Object.keys(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=i.createContext({}),u=function(n){var e=i.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},m=function(n){var e=u(n.components);return i.createElement(s.Provider,{value:e},n.children)},p="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,s=n.parentName,m=l(n,["components","mdxType","originalType","parentName"]),p=u(t),d=a,g=p["".concat(s,".").concat(d)]||p[d]||c[d]||o;return t?i.createElement(g,r(r({ref:e},m),{},{components:t})):i.createElement(g,r({ref:e},m))}));function g(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[p]="string"==typeof n?n:a,r[1]=l;for(var u=2;u<o;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},94238:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var i=t(87462),a=(t(67294),t(3905));const o="import React from 'react';\nimport Animated, {\n  LayoutAnimationConfig,\n  PinwheelIn,\n  PinwheelOut,\n} from 'react-native-reanimated';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  const [outer, setOuter] = React.useState<boolean>(true);\n  const [inner, setInner] = React.useState<boolean>(true);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.buttonColumn}>\n        <Button\n          onPress={() => {\n            setOuter(!outer);\n          }}\n          title={toggleString(outer) + ' outer'}\n        />\n        <Button\n          disabled={!outer}\n          onPress={() => {\n            setInner(!inner);\n          }}\n          title={toggleString(inner) + ' inner'}\n        />\n      </View>\n      <LayoutAnimationConfig skipEntering>\n        {outer && (\n          <Animated.View\n            entering={PinwheelIn}\n            exiting={PinwheelOut}\n            style={styles.outerBox}>\n            <LayoutAnimationConfig skipEntering skipExiting>\n              {inner && (\n                <Animated.View\n                  style={styles.box}\n                  entering={PinwheelIn}\n                  exiting={PinwheelOut}\n                />\n              )}\n            </LayoutAnimationConfig>\n          </Animated.View>\n        )}\n      </LayoutAnimationConfig>\n    </View>\n  );\n}\n\nfunction toggleString(value: boolean) {\n  return value ? 'Hide' : 'Show';\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    height: 220,\n  },\n  buttonColumn: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    height: 90,\n  },\n  outerBox: {\n    width: 150,\n    height: 150,\n    backgroundColor: '#b58df1',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 20,\n    margin: 20,\n  },\n  box: {\n    width: 80,\n    height: 80,\n    backgroundColor: '#782aeb',\n  },\n});\n",r={sidebar_position:5,title:"LayoutAnimationConfig",sidebar_label:"Skipping Layout Animations"},l=void 0,s={unversionedId:"layout-animations/layout-animation-config",id:"layout-animations/layout-animation-config",title:"LayoutAnimationConfig",description:"LayoutAnimationConfig is a component that lets you skip entering and exiting animations.",source:"@site/docs/layout-animations/layout-animation-config.mdx",sourceDirName:"layout-animations",slug:"/layout-animations/layout-animation-config",permalink:"/react-native-reanimated/docs/layout-animations/layout-animation-config",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/layout-animations/layout-animation-config.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"LayoutAnimationConfig",sidebar_label:"Skipping Layout Animations"},sidebar:"tutorialSidebar",previous:{title:"Custom animations",permalink:"/react-native-reanimated/docs/layout-animations/custom-animations"},next:{title:"List Layout Animations",permalink:"/react-native-reanimated/docs/layout-animations/list-layout-animations"}},u={},m=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>skipEntering</code> <Optional />",id:"skipentering-",level:4},{value:"<code>skipExiting</code> <Optional />",id:"skipexiting-",level:4},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],p=n=>function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)},c=p("Optional"),d=p("Row"),g=p("ThemedVideo"),y=p("CollapsibleCode"),f={toc:m},k="wrapper";function h(n){let{components:e,...t}=n;return(0,a.kt)(k,(0,i.Z)({},f,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LayoutAnimationConfig")," is a component that lets you skip entering and exiting animations."),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { LayoutAnimationConfig } from 'react-native-reanimated';\n\nfunction App() {\n  const [show, setShow] = React.useState(true);\n\n  return (\n    // highlight-next-line\n    <LayoutAnimationConfig skipEntering>\n      <View>\n        {show && <Animated.View entering={PinwheelIn} exiting={PinwheelOut} />}\n      </View>\n      // highlight-next-line\n    </LayoutAnimationConfig>\n  );\n}\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Type definitions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface LayoutAnimationConfigProps {\n  skipEntering?: boolean;\n  skipExiting?: boolean;\n  children: ReactNode;\n}\n"))),(0,a.kt)("h3",{id:"arguments"},"Arguments"),(0,a.kt)("h4",{id:"skipentering-"},(0,a.kt)("inlineCode",{parentName:"h4"},"skipEntering")," ",(0,a.kt)(c,{mdxType:"Optional"})),(0,a.kt)("p",null,"A boolean indicating whether children's entering animations should be skipped when ",(0,a.kt)("inlineCode",{parentName:"p"},"LayoutAnimationConfig")," is mounted."),(0,a.kt)("h4",{id:"skipexiting-"},(0,a.kt)("inlineCode",{parentName:"h4"},"skipExiting")," ",(0,a.kt)(c,{mdxType:"Optional"})),(0,a.kt)("p",null,"A boolean indicating whether children's exiting animations should be skipped when ",(0,a.kt)("inlineCode",{parentName:"p"},"LayoutAnimationConfig")," is unmounted."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(d,{mdxType:"Row"},(0,a.kt)(g,{sources:{light:"/recordings/layout-animations/layoutconfig_light.mov",dark:"/recordings/layout-animations/layoutconfig_dark.mov"},mdxType:"ThemedVideo"}),(0,a.kt)("div",{style:{flexGrow:1}},(0,a.kt)(y,{src:o,showLines:[29,46],mdxType:"CollapsibleCode"}))),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can nest the ",(0,a.kt)("inlineCode",{parentName:"p"},"LayoutAnimationConfig")," component if you want to disable animations on a smaller subset of components.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If you are working with a ",(0,a.kt)("inlineCode",{parentName:"p"},"FlatList")," and want to skip animations in items when the list is mounted and unmounted you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"skipEnteringExitingAnimations"),". This prop automatically wraps your ",(0,a.kt)("inlineCode",{parentName:"p"},"FlatList")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"<LayoutAnimationConfig skipEntering skipExiting>"),"."))),(0,a.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.kt)("div",{className:"platform-compatibility"},(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Android"),(0,a.kt)("th",{parentName:"tr",align:null},"iOS"),(0,a.kt)("th",{parentName:"tr",align:null},"Web"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,a.kt)("td",{parentName:"tr",align:null},"\u274c"))))))}h.isMDXComponent=!0}}]);