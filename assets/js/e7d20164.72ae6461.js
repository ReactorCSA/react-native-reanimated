"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[9184],{96067:(e,n,i)=>{i.d(n,{Z:()=>o});var t=i(67294);function a(e){let{value:n}=e;return t.createElement(t.Fragment,null,n?"\u2705":"\u274c")}function o(e){let{android:n=!1,ios:i=!1,web:o=!1}=e;return t.createElement("table",{className:"platform-compatibility"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Android"),t.createElement("th",null,"iOS"),t.createElement("th",null,"Web"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement(a,{value:n})),t.createElement("td",null,t.createElement(a,{value:i})),t.createElement("td",null,t.createElement(a,{value:o})))))}},62116:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>S,contentTitle:()=>x,default:()=>D,frontMatter:()=>T,metadata:()=>E,toc:()=>R});var t=i(87462),a=i(67294),o=i(3905),l=i(96067),r=i(67177),s=i(76636),d=i(88548),m=i(28033),u=i(42233),p=i(10913),c=i(72978),h=i(55819);const f=[{id:1,emoji:"\ud83c\udf4c",color:"#b58df1"},{id:2,emoji:"\ud83c\udf4e",color:"#ffe780"},{id:3,emoji:"\ud83e\udd5b",color:"#fa7f7c"},{id:4,emoji:"\ud83c\udf59",color:"#82cab2"},{id:5,emoji:"\ud83c\udf47",color:"#fa7f7c"},{id:6,emoji:"\ud83c\udf55",color:"#b58df1"},{id:7,emoji:"\ud83c\udf54",color:"#ffe780"},{id:8,emoji:"\ud83c\udf5f",color:"#b58df1"},{id:9,emoji:"\ud83c\udf69",color:"#82cab2"}],k=[{label:"Linear Transition",value:u.LinearTransition},{label:"Sequenced Transition",value:u.SequencedTransition},{label:"Fading Transition",value:u.FadingTransition},{label:"Jumping Transition",value:u.JumpingTransition},{label:"Curved Transition",value:u.CurvedTransition.easingX(u.Easing.sin).easingY(u.Easing.exp)},{label:"Entry/Exit Transition",value:u.EntryExitTransition.entering(u.FlipInEasyY).exiting(u.FlipOutYLeft)}],g={fontSize:14,color:"text.secondary",backgroundColor:"background.default",borderRadius:0,"& fieldset":{borderColor:"text.secondary"}};function v(e){let{value:n,onChange:i,options:t,disabled:o,disabledOptions:l}=e;return a.createElement(r.Z,{style:{width:"30%"}},a.createElement(p.Z,{sx:{minWidth:85},size:"small"},a.createElement(c.Z,{value:n,sx:g,onChange:e=>i(e.target),disabled:o},t.map((e=>a.createElement(h.Z,{key:e.label,value:e.value,disabled:l?.includes(e.label),sx:{color:"text.secondary"}},e.label))))))}function y(){const[e,n]=(0,a.useState)(f),[i,t]=(0,a.useState)(k[0]);return a.createElement(s.Z,{style:C.container},a.createElement(r.Z,{style:C.dropdownContainer},a.createElement(v,{value:i.value,onChange:e=>{t(e),n(f)},options:k})),a.createElement(r.Z,null,a.createElement(N,{selected:i,items:e,onRemove:i=>{const t=e.filter((e=>e.id!==i));n(t)}})))}function N(e){let{selected:n,items:i,onRemove:t}=e;return a.createElement(r.Z,{style:C.gridContainer},i.map((e=>a.createElement(u.default.View,{key:e.id,layout:n.value,exiting:u.FadeOut,style:[C.tileContainer,{backgroundColor:e.color}]},a.createElement(b,{emoji:e.emoji,onRemove:()=>t(e.id)})))))}function b(e){let{emoji:n,onRemove:i}=e;return a.createElement(d.Z,{onPress:i,style:C.tile},a.createElement(u.default.Text,{style:C.tileLabel},n))}const C=m.Z.create({container:{flex:1,padding:32,width:"auto",display:"flex",minHeight:300},gridContainer:{flexDirection:"row",flexWrap:"wrap",alignItems:"flex-start",justifyContent:"center",paddingHorizontal:32},dropdownContainer:{display:"flex",justifyContent:"center",alignItems:"center",marginBottom:16},tileContainer:{width:"20%",margin:"1%",borderRadius:16,minHeight:80,justifyContent:"center",alignItems:"center"},tile:{flex:1,height:"100%",width:" 100%",justifyContent:"center",alignItems:"center"},tileLabel:{color:"#f8f9ff",fontSize:24},wrapper:{width:"100%",position:"absolute",display:"flex",alignItems:"center"},animatedView:{width:"100%",overflow:"hidden"}}),w="import React, { useState, useRef, Dispatch } from 'react';\nimport {\n  View,\n  Text,\n  SafeAreaView,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native';\nimport Animated, {\n  LinearTransition,\n  SequencedTransition,\n  FadingTransition,\n  FadeOut,\n  JumpingTransition,\n  CurvedTransition,\n  EntryExitTransition,\n  FlipOutYLeft,\n  FlipInEasyY,\n  Easing,\n} from 'react-native-reanimated';\nimport { FormControl, MenuItem, Select } from '@mui/material';\n\nconst INITIAL_LIST = [\n  { id: 1, emoji: '\ud83c\udf4c', color: '#b58df1' },\n  { id: 2, emoji: '\ud83c\udf4e', color: '#ffe780' },\n  { id: 3, emoji: '\ud83e\udd5b', color: '#fa7f7c' },\n  { id: 4, emoji: '\ud83c\udf59', color: '#82cab2' },\n  { id: 5, emoji: '\ud83c\udf47', color: '#fa7f7c' },\n  { id: 6, emoji: '\ud83c\udf55', color: '#b58df1' },\n  { id: 7, emoji: '\ud83c\udf54', color: '#ffe780' },\n  { id: 8, emoji: '\ud83c\udf5f', color: '#b58df1' },\n  { id: 9, emoji: '\ud83c\udf69', color: '#82cab2' },\n];\n\ninterface TRANSITION {\n  label: string;\n  value: any;\n}\n\nconst LAYOUT_TRANSITIONS = [\n  { label: 'Linear Transition', value: LinearTransition },\n  { label: 'Sequenced Transition', value: SequencedTransition },\n  { label: 'Fading Transition', value: FadingTransition },\n  { label: 'Jumping Transition', value: JumpingTransition },\n  {\n    label: 'Curved Transition',\n    value: CurvedTransition.easingX(Easing.sin).easingY(Easing.exp),\n  },\n  {\n    label: 'Entry/Exit Transition',\n    value: EntryExitTransition.entering(FlipInEasyY).exiting(FlipOutYLeft),\n  },\n];\n\ninterface SelectProps {\n  value: string;\n  onChange: any;\n  options: TRANSITION[];\n  disabled?: boolean;\n  disabledOptions?: string[];\n}\n\nconst SelectStyling = {\n  fontSize: 14,\n  color: 'text.secondary',\n  backgroundColor: 'background.default',\n  borderRadius: 0,\n  '& fieldset': {\n    borderColor: 'text.secondary',\n  },\n};\n\nexport function SelectOption({\n  value,\n  onChange,\n  options,\n  disabled,\n  disabledOptions,\n}: SelectProps) {\n  return (\n    <View style={{ width: '30%' }}>\n      <FormControl sx={{ minWidth: 85 }} size=\"small\">\n        <Select\n          value={value}\n          sx={SelectStyling}\n          onChange={(e) => onChange(e.target)}\n          disabled={disabled}>\n          {options.map((option) => (\n            <MenuItem\n              key={option.label}\n              value={option.value}\n              disabled={disabledOptions?.includes(option.label)}\n              sx={{ color: 'text.secondary' }}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </View>\n  );\n}\n\nexport default function App() {\n  const [items, setItems] = useState(INITIAL_LIST);\n  const [selected, setSelected] = useState(LAYOUT_TRANSITIONS[0]);\n\n  const removeItem = (idToRemove) => {\n    const updatedItems = items.filter((item) => item.id !== idToRemove);\n    setItems(updatedItems);\n  };\n\n  const onSelect = (item) => {\n    setSelected(item);\n    setItems(INITIAL_LIST);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.dropdownContainer}>\n        <SelectOption\n          value={selected.value}\n          onChange={onSelect}\n          options={LAYOUT_TRANSITIONS}\n        />\n      </View>\n      <View>\n        <Items selected={selected} items={items} onRemove={removeItem} />\n      </View>\n    </SafeAreaView>\n  );\n}\n\nfunction Items({ selected, items, onRemove }) {\n  return (\n    <View style={styles.gridContainer}>\n      {items.map((item) => (\n        <Animated.View\n          key={item.id}\n          layout={selected.value}\n          exiting={FadeOut}\n          style={[styles.tileContainer, { backgroundColor: item.color }]}>\n          <Tile emoji={item.emoji} onRemove={() => onRemove(item.id)} />\n        </Animated.View>\n      ))}\n    </View>\n  );\n}\n\nfunction Tile({ emoji, onRemove }) {\n  return (\n    <TouchableOpacity onPress={onRemove} style={styles.tile}>\n      <Animated.Text style={styles.tileLabel}>{emoji}</Animated.Text>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 32,\n    width: 'auto',\n    display: 'flex',\n    minHeight: 300,\n  },\n  gridContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    paddingHorizontal: 32,\n  },\n  dropdownContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  tileContainer: {\n    width: '20%',\n    margin: '1%',\n    borderRadius: 16,\n    minHeight: 80,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  tile: {\n    flex: 1,\n    height: '100%',\n    width: ' 100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  tileLabel: {\n    color: '#f8f9ff',\n    fontSize: 24,\n  },\n  wrapper: {\n    width: '100%',\n    position: 'absolute',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  animatedView: {\n    width: '100%',\n    overflow: 'hidden',\n  },\n});\n",T={sidebar_position:3},x="Layout transitions",E={unversionedId:"layout-animations/layout-transitions",id:"layout-animations/layout-transitions",title:"Layout transitions",description:"Layout transitions allows you to replace layout changes with smooth transitions. Each layout change may include changes of size and position and both of them can be animated.",source:"@site/docs/layout-animations/layout-transitions.mdx",sourceDirName:"layout-animations",slug:"/layout-animations/layout-transitions",permalink:"/react-native-reanimated/docs/layout-animations/layout-transitions",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/layout-animations/layout-transitions.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Keyframe animations",permalink:"/react-native-reanimated/docs/layout-animations/keyframe-animations"},next:{title:"Custom animations",permalink:"/react-native-reanimated/docs/layout-animations/custom-animations"}},S={},R=[{value:"Predefined Transitions",id:"predefined-transitions",level:2},{value:"Linear transition",id:"linear-transition",level:2},{value:"Reference",id:"reference",level:3},{value:"Modifiers",id:"modifiers",level:3},{value:"Easing <Optional/>",id:"easing-",level:4},{value:"Spring-based <Optional/>",id:"spring-based-",level:4},{value:"Common <Optional/>",id:"common-",level:4},{value:"Remarks",id:"remarks",level:3},{value:"Example",id:"example",level:3},{value:"Sequenced Transition",id:"sequenced-transition",level:2},{value:"Reference",id:"reference-1",level:3},{value:"Modifiers",id:"modifiers-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Fading Transition",id:"fading-transition",level:2},{value:"Reference",id:"reference-2",level:3},{value:"Modifiers",id:"modifiers-2",level:3},{value:"Example",id:"example-2",level:3},{value:"Jumping Transition",id:"jumping-transition",level:2},{value:"Reference",id:"reference-3",level:3},{value:"Modifiers",id:"modifiers-3",level:3},{value:"Example",id:"example-3",level:3},{value:"Curved Transition",id:"curved-transition",level:2},{value:"Reference",id:"reference-4",level:3},{value:"Modifiers",id:"modifiers-4",level:3},{value:"Remarks",id:"remarks-1",level:3},{value:"Example",id:"example-4",level:3},{value:"Entry/Exit Transition",id:"entryexit-transition",level:2},{value:"Reference",id:"reference-5",level:3},{value:"Modifiers",id:"modifiers-5",level:3},{value:"Remarks",id:"remarks-2",level:3},{value:"Example",id:"example-5",level:3},{value:"Platform compatibility",id:"platform-compatibility",level:2}],I=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},j=I("InteractiveExample"),M=I("Optional"),_=I("ExampleVideo"),L={toc:R},A="wrapper";function D(e){let{components:n,...i}=e;return(0,o.kt)(A,(0,t.Z)({},L,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"layout-transitions"},"Layout transitions"),(0,o.kt)("p",null,"Layout transitions allows you to replace layout changes with smooth transitions. Each layout change may include changes of size and position and both of them can be animated."),(0,o.kt)(j,{src:w,component:y,mdxType:"InteractiveExample"}),(0,o.kt)("h2",{id:"predefined-transitions"},"Predefined Transitions"),(0,o.kt)("p",null,"Below we listed all of the currently available predefined layout transitions with their ",(0,o.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#layout-animation-modifier"},"layout animation modifiers"),"."),(0,o.kt)("h2",{id:"linear-transition"},"Linear transition"),(0,o.kt)("p",null,"Linear transition animates both position and dimension in the same way."),(0,o.kt)("h3",{id:"reference"},"Reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { LinearTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={LinearTransition} />;\n}\n")),(0,o.kt)("h3",{id:"modifiers"},"Modifiers"),(0,o.kt)("h4",{id:"easing-"},"Easing ",(0,o.kt)(M,{mdxType:"Optional"})),(0,o.kt)("p",null,"Easing modifiers are time-based modifiers that relay on ",(0,o.kt)("a",{parentName:"p",href:"/docs/animations/withTiming"},(0,o.kt)("inlineCode",{parentName:"a"},"withTiming"))," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"LinearTransition.easing(Easing.ease);\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".easing(easingFunction: EasingFunction)")," is an easing function which defines the animation curve. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"Easing.inOut(Easing.quad)"))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},".easing(...)")," modifiers have no effect when ",(0,o.kt)("inlineCode",{parentName:"p"},".springify()")," is used.")),(0,o.kt)("h4",{id:"spring-based-"},"Spring-based ",(0,o.kt)(M,{mdxType:"Optional"})),(0,o.kt)("p",null,"Spring-based modifiers relay on ",(0,o.kt)("a",{parentName:"p",href:"/docs/animations/withSpring"},(0,o.kt)("inlineCode",{parentName:"a"},"withSpring"))," function.\nJust as in ",(0,o.kt)("inlineCode",{parentName:"p"},"withSpring")," config, spring-based modifiers can be physics-based (have ",(0,o.kt)("inlineCode",{parentName:"p"},"mass")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"damping")," modifiers) or duration-based (have ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dampingRatio")," modifiers)."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mass")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"damping")," (physics-based) properties can't be used at the same time as ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dampingRatio")," (duration-based)."),(0,o.kt)("p",{parentName:"admonition"},"When used together ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dampingRatio")," overrides ",(0,o.kt)("inlineCode",{parentName:"p"},"mass")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"damping")," props.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"LinearTransition.springify()\n  .damping(30)\n  .mass(5)\n  .rotate(20)\n  .stiffness(10)\n  .overshootClamping(false)\n  .restDisplacementThreshold(0.1)\n  .restSpeedThreshold(5);\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".springify()")," enables the spring-based animation configuration."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".damping(value: number)")," decides how quickly a spring stops moving. Higher damping means the spring will come to rest faster. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"10"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".dampingRatio(value: number)")," decides how damped the spring is. Value ",(0,o.kt)("inlineCode",{parentName:"li"},"1")," means the spring is critically damped, and value ",(0,o.kt)("inlineCode",{parentName:"li"},">1")," means the spring is overdamped. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"0.5"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".mass(value: number)")," is the weight of the spring. Reducing this value makes the animation faster. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".rotate(degree: string)")," lets you rotate the element."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".stiffness(value: number)")," decides how bouncy the spring is - the higher the number, the less bouncy it is. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"100"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".overshootClamping(value: boolean)")," decides whether a spring can bounce over the designated position. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".restDisplacementThreshold(value: number)")," is the displacement below which the spring will snap to the designated position without further oscillations. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"0.001"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".restSpeedThreshold(value: number)")," is the speed in pixels per second below which the spring will snap to the designated position without further oscillations. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"2"),".")),(0,o.kt)("h4",{id:"common-"},"Common ",(0,o.kt)(M,{mdxType:"Optional"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"LinearTransition.delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withInitialValues({ transform: [{ translateY: 420 }] })\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".duration(duration: number)")," sets length of the animation (in milliseconds). Defaults to '300'."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".delay(duration: number)")," is the delay before the animation starts (in milliseconds). Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".reduceMotion(reduceMotion: ReduceMotion)")," determines how the animation responds to the device's reduced motion ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/accessibility"},"accessibility")," setting."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".withInitialValues(values: StyleProps)")," allows to override the initial config of the animation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".withCallback(callback: (finished: boolean) => void)")," is the callback that will fire after the animation ends. Sets ",(0,o.kt)("inlineCode",{parentName:"li"},"finished")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," when animation ends without interruptions, and ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,o.kt)("h3",{id:"remarks"},"Remarks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The animation will end if ",(0,o.kt)("strong",{parentName:"li"},"both")," the animation speed is below ",(0,o.kt)("inlineCode",{parentName:"li"},"restSpeedTreshold")," and the distance to its end is less than ",(0,o.kt)("inlineCode",{parentName:"li"},"restDisplacementTreshold"),". Keep in mind that if you haven't set one of the thresholds, its value will be set to the default.")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)(_,{sources:{android:"/react-native-reanimated/recordings/layout_transitions/android_linear_transition.mov",ios:"/react-native-reanimated/recordings/layout_transitions/ios_linear_transition.mov"},mdxType:"ExampleVideo"}),(0,o.kt)("h2",{id:"sequenced-transition"},"Sequenced Transition"),(0,o.kt)("p",null,"Sequenced transition animates x-position and width first, then y-position and height."),(0,o.kt)("h3",{id:"reference-1"},"Reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { SequencedTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={SequencedTransition} />;\n}\n")),(0,o.kt)("h3",{id:"modifiers-1"},"Modifiers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"SequencedTransition.duration(1000)\n  .delay(500)\n  .reverse()\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".duration(duration: number)")," sets length of the animation (in milliseconds). Defaults to '500'."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".delay(duration: number)")," is the delay before the animation starts (in milliseconds). Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".reverse()")," determines if the animation should run in reverse. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".reduceMotion(reduceMotion: ReduceMotion)")," determines how the animation responds to the device's reduced motion ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/accessibility"},"accessibility")," setting."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".withCallback(callback: (finished: boolean) => void)")," is the callback that will fire after the animation ends. Sets ",(0,o.kt)("inlineCode",{parentName:"li"},"finished")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," when animation ends without interruptions, and ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)(_,{sources:{android:"/react-native-reanimated/recordings/layout_transitions/android_sequenced_transition.mov",ios:"/react-native-reanimated/recordings/layout_transitions/ios_sequenced_transition.mov"},mdxType:"ExampleVideo"}),(0,o.kt)("h2",{id:"fading-transition"},"Fading Transition"),(0,o.kt)("p",null,"Fading transition animates the opacity of component. It will disappear while having previous position and dimensions and appear with new ones."),(0,o.kt)("h3",{id:"reference-2"},"Reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { FadingTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={FadingTransition} />;\n}\n")),(0,o.kt)("h3",{id:"modifiers-2"},"Modifiers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"FadingTransition.duration(1000)\n  .delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".duration(duration: number)")," sets length of the animation (in milliseconds). Defaults to '500'."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".delay(duration: number)")," is the delay before the animation starts (in milliseconds). Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".reduceMotion(reduceMotion: ReduceMotion)")," determines how the animation responds to the device's reduced motion ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/accessibility"},"accessibility")," setting."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".withCallback(callback: (finished: boolean) => void)")," is the callback that will fire after the animation ends. Sets ",(0,o.kt)("inlineCode",{parentName:"li"},"finished")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," when animation ends without interruptions, and ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,o.kt)("h3",{id:"example-2"},"Example"),(0,o.kt)(_,{sources:{android:"/react-native-reanimated/recordings/layout_transitions/android_fading_transition.mov",ios:"/react-native-reanimated/recordings/layout_transitions/ios_fading_transition.mov"},mdxType:"ExampleVideo"}),(0,o.kt)("h2",{id:"jumping-transition"},"Jumping Transition"),(0,o.kt)("p",null,'Jumping transition makes components "jump" to the new position.'),(0,o.kt)("h3",{id:"reference-3"},"Reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { JumpingTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={JumpingTransition} />;\n}\n")),(0,o.kt)("h3",{id:"modifiers-3"},"Modifiers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"JumpingTransition.duration(1000)\n  .delay(500)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".duration(duration: number)")," sets length of the animation (in milliseconds). Defaults to '300'."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".delay(duration: number)")," is the delay before the animation starts (in milliseconds). Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".reduceMotion(reduceMotion: ReduceMotion)")," determines how the animation responds to the device's reduced motion ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/accessibility"},"accessibility")," setting."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".withCallback(callback: (finished: boolean) => void)")," is the callback that will fire after the animation ends. Sets ",(0,o.kt)("inlineCode",{parentName:"li"},"finished")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," when animation ends without interruptions, and ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,o.kt)("h3",{id:"example-3"},"Example"),(0,o.kt)(_,{sources:{android:"/react-native-reanimated/recordings/layout_transitions/android_jumping_transition.mov",ios:"/react-native-reanimated/recordings/layout_transitions/ios_jumping_transition.mov"},mdxType:"ExampleVideo"}),(0,o.kt)("h2",{id:"curved-transition"},"Curved Transition"),(0,o.kt)("p",null,"Curved transition enables animation of all parameters (",(0,o.kt)("inlineCode",{parentName:"p"},"X"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Y"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"width"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"height"),") with different easing each. It makes component movement path look curved."),(0,o.kt)("h3",{id:"reference-4"},"Reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { CurvedTransiton } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={CurvedTransiton} />;\n}\n")),(0,o.kt)("h3",{id:"modifiers-4"},"Modifiers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"CurvedTransiton.duration(1000)\n  .delay(500)\n  .easingX(Easing.in(Easing.exp))\n  .easingY(Easing.out(Easing.quad))\n  .easingWidth(Easing.in(Easing.ease))\n  .easingHeight(Easing.out(Easing.exp))\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".duration(duration: number)")," sets length of the animation (in milliseconds). Defaults to '300'."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".delay(duration: number)")," is the delay before the animation starts (in milliseconds). Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".easingX(easing: EasingFunction)")," defines easing animation for x-position."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".easingY(easing: EasingFunction)")," defines easing animation for y-position."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".easingWidth(easing: EasingFunction)")," defines easing animation for width."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".easingHeight(easing: EasingFunction)")," defines easing animation for height."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".reduceMotion(reduceMotion: ReduceMotion)")," determines how the animation responds to the device's reduced motion ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/accessibility"},"accessibility")," setting."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".withCallback(callback: (finished: boolean) => void)")," is the callback that will fire after the animation ends. Sets ",(0,o.kt)("inlineCode",{parentName:"li"},"finished")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," when animation ends without interruptions, and ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,o.kt)("h3",{id:"remarks-1"},"Remarks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Length of the duration is shared for all of the easings.")),(0,o.kt)("h3",{id:"example-4"},"Example"),(0,o.kt)(_,{sources:{android:"/react-native-reanimated/recordings/layout_transitions/android_curved_transition.mov",ios:"/react-native-reanimated/recordings/layout_transitions/ios_curved_transition.mov"},mdxType:"ExampleVideo"}),(0,o.kt)("h2",{id:"entryexit-transition"},"Entry/Exit Transition"),(0,o.kt)("p",null,"Entry/Exit transition lets you choose layout animations for entering and exiting. It combines both of them into a one and applies to the layout. Moreover, instead of picking currently available animations, you are welcome to create your own one."),(0,o.kt)("h3",{id:"reference-5"},"Reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { EntryExitTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return <Animated.View layout={EntryExitTransition} />;\n}\n")),(0,o.kt)("h3",{id:"modifiers-5"},"Modifiers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"EntryExitTransition.duration(1000)\n  .delay(500)\n  .entering(FlipInEasyX)\n  .exiting(FlipOutEasyY)\n  .reduceMotion(ReduceMotion.Never)\n  .withCallback((finished) => {\n    console.log(`finished without interruptions: ${finished}`);\n  });\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".duration(duration: number)")," sets length of the animation (in milliseconds). Default depends on entry/exit animation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".delay(duration: number)")," is the delay before the animation starts (in milliseconds). Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".exiting(animation)")," determines animation shown when element is removed from position. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"FadeOut"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".entering(animation)")," determines animation shown when element is added to new position. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"FadeIn"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".reduceMotion(reduceMotion: ReduceMotion)")," determines how the animation responds to the device's reduced motion ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/accessibility"},"accessibility")," setting."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".withCallback(callback: (finished: boolean) => void)")," is the callback that will fire after the animation ends. Sets ",(0,o.kt)("inlineCode",{parentName:"li"},"finished")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," when animation ends without interruptions, and ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,o.kt)("h3",{id:"remarks-2"},"Remarks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Duration equals sum of entering and exiting durations.")),(0,o.kt)("h3",{id:"example-5"},"Example"),(0,o.kt)(_,{sources:{android:"/react-native-reanimated/recordings/layout_transitions/android_entryexit_transition.mov",ios:"/react-native-reanimated/recordings/layout_transitions/ios_entryexit_transition.mov"},mdxType:"ExampleVideo"}),(0,o.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,o.kt)(l.Z,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}D.isMDXComponent=!0},76636:(e,n,i)=>{i.d(n,{Z:()=>c});var t=i(87462),a=i(63366),o=i(67294),l=i(28033),r=i(67177),s=i(13145),d=["style"],m=s.Z&&window.CSS&&window.CSS.supports&&window.CSS.supports("top: constant(safe-area-inset-top)")?"constant":"env",u=o.forwardRef(((e,n)=>{var i=e.style,s=(0,a.Z)(e,d);return o.createElement(r.Z,(0,t.Z)({},s,{ref:n,style:l.Z.compose(p.root,i)}))}));u.displayName="SafeAreaView";var p=l.Z.create({root:{paddingTop:m+"(safe-area-inset-top)",paddingRight:m+"(safe-area-inset-right)",paddingBottom:m+"(safe-area-inset-bottom)",paddingLeft:m+"(safe-area-inset-left)"}});const c=u}}]);