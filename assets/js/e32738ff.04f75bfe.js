"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[1845],{63354:(e,n,t)=>{t.d(n,{Z:()=>d});var a=t(67294),i=t(67177),s=t(72400),o=t(28033),l=t(42233),r=t(44553);const m=l.default.createAnimatedComponent(r.Cd),p={code:"function AnimatingPropsTsx1(){const{withTiming,r}=this.__closure;return{r:withTiming(r.value)};}"};function d(){const e=(0,l.useSharedValue)(20),n=(0,l.useAnimatedProps)(function(){const n=()=>({r:(0,l.withTiming)(e.value)});return n.__closure={withTiming:l.withTiming,r:e},n.__workletHash=5140780619767,n.__initData=p,n}());return a.createElement(i.Z,{style:u.container},a.createElement(r.ny,{style:u.svg},a.createElement(m,{cx:"50%",cy:"50%",fill:"#b58df1",animatedProps:n})),a.createElement(s.Z,{onPress:()=>{e.value+=10},title:"Click me"}))}const u=o.Z.create({container:{flex:1,alignItems:"center"},svg:{height:250,width:"100%"}})},83042:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(67294),i=t(67177),s=t(72400),o=t(28033),l=t(42233);const r={code:"function AnimatingStylesTsx1(){const{withSpring,translateX}=this.__closure;return{transform:[{translateX:withSpring(translateX.value*2)}]};}"};function m(){const e=(0,l.useSharedValue)(0),n=(0,l.useAnimatedStyle)(function(){const n=()=>({transform:[{translateX:(0,l.withSpring)(2*e.value)}]});return n.__closure={withSpring:l.withSpring,translateX:e},n.__workletHash=0xf16af34d7f,n.__initData=r,n}());return a.createElement(a.Fragment,null,a.createElement(l.default.View,{style:[p.box,n]}),a.createElement(i.Z,{style:p.container},a.createElement(s.Z,{onPress:()=>{e.value+=50},title:"Click me"})))}const p=o.Z.create({container:{flex:1,alignItems:"center",justifyContent:"center"},box:{height:120,width:120,backgroundColor:"#b58df1",borderRadius:20,marginVertical:50}})},29679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>f,frontMatter:()=>m,metadata:()=>d,toc:()=>c});var a=t(87462),i=(t(67294),t(3905)),s=t(83042),o=t(11031),l=t(63354),r=t(47315);const m={sidebar_position:3},p="Animating styles and props",d={unversionedId:"fundamentals/animating-styles-and-props",id:"fundamentals/animating-styles-and-props",title:"Animating styles and props",description:"In the last section, we learned how to make simple animations, what shared values are and how to use them. Now, we'll learn a different way of passing animation styles to components. We'll also go over the difference between animating styles and props and how to handle them using useAnimatedStyle and useAnimatedProps.",source:"@site/docs/fundamentals/animating-styles-and-props.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/animating-styles-and-props",permalink:"/react-native-reanimated/docs/fundamentals/animating-styles-and-props",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/fundamentals/animating-styles-and-props.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Your First Animation",permalink:"/react-native-reanimated/docs/fundamentals/your-first-animation"},next:{title:"Customizing animations",permalink:"/react-native-reanimated/docs/fundamentals/customizing-animation"}},u={},c=[{value:"Animating styles",id:"animating-styles",level:2},{value:"Animating props",id:"animating-props",level:2},{value:"Summary",id:"summary",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}],h=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},g=h("CollapsibleCode"),y=h("InteractiveExample"),w={toc:c},k="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(k,(0,a.Z)({},w,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"animating-styles-and-props"},"Animating styles and props"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/your-first-animation"},"the last section"),", we learned how to make simple animations, what shared values are and how to use them. Now, we'll learn a different way of passing animation styles to components. We'll also go over the difference between animating styles and props and how to handle them using ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedProps"),"."),(0,i.kt)("h2",{id:"animating-styles"},"Animating styles"),(0,i.kt)("p",null,"As we learned in the previous section we can animate styles by ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animations-in-inline-styling"},"passing shared values inline")," to the elements' ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import Animated, { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(100);\n\n  return <Animated.View style={{ width }} />;\n}\n")),(0,i.kt)("p",null,"In basic cases, this syntax works well but it has one big downside. It doesn't allow to access the value stored in a shared value. For example, it's not possible to build more complex animations by using inline styling to multiply this value (or do any other mathematical operation) before assigning it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<Animated.View style={{ width: width * 5 }} /> // this won't work\n")),(0,i.kt)("p",null,"Let's suppose we have an example with a box which moves to the right on every button press:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Button } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nfunction App() {\n  const translateX = useSharedValue(0);\n\n  const handlePress = () => {\n    // highlight-next-line\n    translateX.value = withSpring(translateX.value + 50);\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* highlight-next-line */}\n      <Animated.View style={[styles.box, { transform: [{ translateX }] }]} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n")),(0,i.kt)("p",null,"If we would like to customize how our shared value changes based on some user input, (e.g. multiplying it by 2 or following some other mathematical equation) we couldn't use inline styling."),(0,i.kt)("p",null,"Luckily, the ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," hook comes to the rescue. It adds additional control and flexibility over your animation. This can be really useful when creating a bit more complicated animations which include conditional statements or loops."),(0,i.kt)("p",null,"Let's see it in action:"),(0,i.kt)(g,{showLines:[8,29],src:o.Z,mdxType:"CollapsibleCode"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," lets you access the value stored in a shared value. Thanks to that we could multiply the value by ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," before assigning it to ",(0,i.kt)("inlineCode",{parentName:"p"},"style"),". This hook has one more advantage over passing animations to inline styles. It allows you to keep all the animation-related logic in one place."),(0,i.kt)("p",null,"You can see it in action in the example below:"),(0,i.kt)(y,{src:o.Z,component:s.Z,mdxType:"InteractiveExample"}),(0,i.kt)("h2",{id:"animating-props"},"Animating props"),(0,i.kt)("p",null,"Most of the values that developers animate (",(0,i.kt)("inlineCode",{parentName:"p"},"width"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"color"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," etc.) are modified by passing them as an object to the ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," property of an element. But that's not always the case."),(0,i.kt)("p",null,"Sometimes we'd like to animate not just styles but also the props which are passed to the component."),(0,i.kt)("p",null,"For example, let's say we would like to animate SVG elements. Instead of passing values to the ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," property, values are defined as props:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<Circle cx="50" cy="50" r="10" fill="blue" />\n')),(0,i.kt)("p",null,"Reanimated comes with just a handful of built-in components like ",(0,i.kt)("inlineCode",{parentName:"p"},"Animated.View")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Animated.ScrollView"),". For components which aren't a part of Reanimated, to make their props animatable, we need to wrap them with ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/createAnimatedComponent"},(0,i.kt)("inlineCode",{parentName:"a"},"createAnimatedComponent")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import Animated from 'react-native-reanimated';\nimport { Circle } from 'react-native-svg';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n")),(0,i.kt)("p",null,"To animate the radius of the SVG circle we can simply pass the shared value as a prop:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useSharedValue } from \'react-native-reanimated\';\nimport { Svg } from \'react-native-svg\';\n\nfunction App() {\n  const r = useSharedValue(10);\n\n  return (\n    <Svg>\n      {/* highlight-next-line */}\n      <AnimatedCircle cx="50" cy="50" r={r} fill="blue" />\n    </Svg>\n  );\n}\n')),(0,i.kt)("p",null,"This approach works just fine but same as ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," for animating styles we can encapsulate the animation logic and gain access to the ",(0,i.kt)("inlineCode",{parentName:"p"},".value")," property of a shared value by using ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedProps"),"."),(0,i.kt)("p",null,"So if we'd like to smoothly increase the radius of a circle by ",(0,i.kt)("inlineCode",{parentName:"p"},"10px")," on each button press we could use ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedProps"),":"),(0,i.kt)(g,{showLines:[9,39],src:r.Z,mdxType:"CollapsibleCode"}),(0,i.kt)("p",null,"In a function which ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedProps")," takes as an argument, we return an object with all the props we'd like to animate. Then we can pass the value which ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedProps")," returns to the ",(0,i.kt)("inlineCode",{parentName:"p"},"animatedProps")," prop of an Animated component."),(0,i.kt)("p",null,"Check out the full example below:"),(0,i.kt)(y,{src:r.Z,component:l.Z,mdxType:"InteractiveExample"}),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In this section, we went through the differences between animating styles and props and how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedProps"),". To sum up:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Passing shared values to inline styles is a simple way of creating animations but it has some limitations."),(0,i.kt)("li",{parentName:"ul"},"Difference between animating ",(0,i.kt)("inlineCode",{parentName:"li"},"props")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"styles")," is that props are not passed to the ",(0,i.kt)("inlineCode",{parentName:"li"},"style")," object, but rather as separate props of the component."),(0,i.kt)("li",{parentName:"ul"},"By using ",(0,i.kt)("inlineCode",{parentName:"li"},"useAnimatedStyle")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"useAnimatedProps"),", you can access the value stored in a shared value. This can add additional control over the animation."),(0,i.kt)("li",{parentName:"ul"},"You can make your own animatable components by wrapping them with ",(0,i.kt)("inlineCode",{parentName:"li"},"Animated.createAnimatedComponent"),".")),(0,i.kt)("h2",{id:"whats-next"},"What's next?"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/customizing-animation"},"the next section"),", we'll learn more about animation functions and how to customize their behavior."))}f.isMDXComponent=!0},47315:(e,n,t)=>{t.d(n,{Z:()=>a});const a="import React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedProps,\n  withTiming,\n} from 'react-native-reanimated';\nimport { Svg, Circle } from 'react-native-svg';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport default function App() {\n  const r = useSharedValue<number>(20);\n\n  const handlePress = () => {\n    r.value += 10;\n  };\n\n  // highlight-start\n  const animatedProps = useAnimatedProps(() => ({\n    r: withTiming(r.value),\n  }));\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      <Svg style={styles.svg}>\n        <AnimatedCircle\n          cx=\"50%\"\n          cy=\"50%\"\n          fill=\"#b58df1\"\n          // highlight-next-line\n          animatedProps={animatedProps}\n        />\n      </Svg>\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  svg: {\n    height: 250,\n    width: '100%',\n  },\n});\n"},11031:(e,n,t)=>{t.d(n,{Z:()=>a});const a="import React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  withSpring,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const translateX = useSharedValue<number>(0);\n\n  const handlePress = () => {\n    translateX.value += 50;\n  };\n\n  // highlight-start\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateX: withSpring(translateX.value * 2) }],\n  }));\n  // highlight-end\n\n  return (\n    <>\n      {/* highlight-next-line */}\n      <Animated.View style={[styles.box, animatedStyles]} />\n      <View style={styles.container}>\n        <Button onPress={handlePress} title=\"Click me\" />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 50,\n  },\n});\n"}}]);